import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { gameService } from '../services/gameService';
import GameBoard from '../components/GameBoard/GameBoard';

const GamePage: React.FC = () => {
  const navigate = useNavigate();
  const [gameState, setGameState] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [currentUser, setCurrentUser] = useState<any>(null);

  useEffect(() => {
    console.log('üéÆ [GAMEPAGE] GamePage mounted');
    
    // Get current user
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    setCurrentUser(user);
    console.log('üéÆ [GAMEPAGE] Current user:', user.username);
    
    // Set up game listeners
    setupGameListeners();
    
    // Request current game state
    console.log('üéÆ [GAMEPAGE] Requesting current game state...');
    requestGameState();
    
    return () => {
      console.log('üéÆ [GAMEPAGE] GamePage unmounting, cleaning up listeners');
      gameService.removeAllGameListeners();
    };
  }, []);

  const setupGameListeners = () => {
    console.log('üéÆ [GAMEPAGE] Setting up game listeners...');
    
    gameService.onGameStateUpdated((newGameState: any) => {
      console.log('üéÆ [GAMEPAGE] Game state updated:', newGameState);
      setGameState(newGameState);
      setIsLoading(false);
      
      if (newGameState.status !== 'playing') {
        console.log('‚ö†Ô∏è [GAMEPAGE] Game not in playing state:', newGameState.status);
        setError('Game is not in playing state');
      }
    });

    gameService.onGameError((error: string) => {
      console.error('üéÆ [GAMEPAGE] Game error:', error);
      setError(error);
      setIsLoading(false);
    });
  };

  const requestGameState = () => {
    // For now, we'll create a simple fallback since we don't have the socket infrastructure
    // In a real implementation, this would request the current game state from the server
    console.log('üéÆ [GAMEPAGE] Using fallback game state for now...');
    
    const fallbackGameState = {
      id: 'game_123',
      status: 'playing',
      roomCode: 'ABC123',
      currentTurn: 'red',
      players: [
        { id: '1', username: 'Player1', team: 'red', role: 'spymaster' },
        { id: '2', username: 'Player2', team: 'blue', role: 'spymaster' },
        { id: '3', username: 'Player3', team: 'red', role: 'operative' },
        { id: '4', username: 'Player4', team: 'blue', role: 'operative' }
      ],
      board: generateSampleBoard(),
      guessesRemaining: 0,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    // Simulate receiving game state after a brief delay
    setTimeout(() => {
      console.log('üéÆ [GAMEPAGE] Setting fallback game state');
      setGameState(fallbackGameState);
      setIsLoading(false);
    }, 500);
  };

  const generateSampleBoard = () => {
    const words = [
      'APPLE', 'HOUSE', 'OCEAN', 'TIGER', 'MOON',
      'GUITAR', 'RIVER', 'CASTLE', 'EAGLE', 'FOREST',
      'PIANO', 'MOUNTAIN', 'WIZARD', 'DRAGON', 'SUNSET',
      'ROBOT', 'GARDEN', 'THUNDER', 'CRYSTAL', 'PHOENIX',
      'BRIDGE', 'COMPASS', 'GALAXY', 'MIRROR', 'SHADOW'
    ];
    
    const teams = [
      ...Array(9).fill('red'),
      ...Array(8).fill('blue'), 
      ...Array(7).fill('neutral'),
      'assassin'
    ];
    
    // Shuffle teams
    for (let i = teams.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [teams[i], teams[j]] = [teams[j], teams[i]];
    }
    
    return words.map((word, index) => ({
      id: `card-${index}`,
      word,
      team: teams[index],
      isRevealed: false,
      position: index
    }));
  };

  const handleBackToRoom = () => {
    console.log('üéÆ [GAMEPAGE] Going back to room selection...');
    navigate('/');
  };

  const handleEndGame = () => {
    console.log('üéÆ [GAMEPAGE] Ending game...');
    // In a real implementation, this would end the game on the server
    navigate('/');
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-xl text-gray-900 mb-4">Loading Codenames Game...</div>
          <div className="text-gray-600 mb-4">Setting up your game board</div>
          <div className="w-8 h-8 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center bg-white p-8 rounded-lg shadow border border-gray-200 max-w-md">
          <div className="text-red-600 text-xl mb-4">Game Error</div>
          <div className="text-gray-600 mb-6">
            <p>{error}</p>
          </div>
          <div className="space-y-3">
            <button 
              onClick={handleBackToRoom}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded"
            >
              Back to Room Selection
            </button>
            <button 
              onClick={() => window.location.reload()}
              className="w-full bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded"
            >
              Retry
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!gameState) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-xl text-gray-900 mb-4">No Game Found</div>
          <button 
            onClick={handleBackToRoom}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded"
          >
            Back to Home
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Codenames Game</h1>
            <div className="text-sm text-gray-600">
              Room: {gameState.roomCode} | Current Turn: {gameState.currentTurn} team
            </div>
          </div>
          <div className="flex space-x-3">
            <button
              onClick={handleBackToRoom}
              className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded text-sm"
            >
              Back to Rooms
            </button>
            <button
              onClick={handleEndGame}
              className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded text-sm"
            >
              End Game
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto p-6">
        {/* Game Status */}
        <div className="mb-6 bg-white rounded-lg shadow p-4">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Game Status</h2>
            <div className="text-sm text-gray-600">
              Status: <span className="font-semibold text-green-600">{gameState.status}</span>
            </div>
          </div>
          
          {/* Players */}
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-red-50 border border-red-200 rounded p-3">
              <h3 className="font-semibold text-red-700 mb-2">üî¥ Red Team</h3>
              {gameState.players.filter((p: any) => p.team === 'red').map((player: any) => (
                <div key={player.id} className="text-sm">
                  {player.username} ({player.role})
                </div>
              ))}
            </div>
            <div className="bg-blue-50 border border-blue-200 rounded p-3">
              <h3 className="font-semibold text-blue-700 mb-2">üîµ Blue Team</h3>
              {gameState.players.filter((p: any) => p.team === 'blue').map((player: any) => (
                <div key={player.id} className="text-sm">
                  {player.username} ({player.role})
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Game Board */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Game Board</h2>
          {gameState.board && <GameBoard gameState={gameState} currentUser={currentUser} />}
        </div>

        {/* Debug Info */}
        <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded p-3 text-xs">
          <strong>üîç Debug:</strong> 
          Game ID: {gameState.id} | 
          Players: {gameState.players?.length} | 
          Board Cards: {gameState.board?.length} |
          Current Turn: {gameState.currentTurn} |
          Guesses: {gameState.guessesRemaining}
        </div>
      </div>
    </div>
  );
};

export default GamePage;