import React, { useState, useEffect } from 'react';
import { socketService } from '../services/socketService';
import { useNavigate } from 'react-router-dom';
import ChatRoom from '../components/Chat/ChatRoom';

interface GameListItem {
  code: string;
  id: string;
  status: string;
  playerCount: number;
  players: string[];
  createdAt: string;
  lastActivity: string;
}

const HomePage: React.FC = () => {
  // Debug state for socket monitoring
  const [socketDebug, setSocketDebug] = useState({
    isConnected: false,
    socketId: '',
    connectionCount: 0,
    connectionHistory: [] as string[],
    lastActivity: '',
    socketInstance: null as any
  });
  
  // Update socket debug info
  useEffect(() => {
    const updateDebugInfo = () => {
      const socket = socketService.socket;
      setSocketDebug(prev => ({
        ...prev,
        isConnected: socketService.isConnected,
        socketId: socket?.id || 'Not connected',
        socketInstance: socket,
        lastActivity: new Date().toLocaleTimeString()
      }));
    };
    
    // Update every second
    const interval = setInterval(updateDebugInfo, 1000);
    
    // Set up socket event listeners for debugging
    if (socketService.socket) {
      socketService.socket.on('connect', () => {
        setSocketDebug(prev => ({
          ...prev,
          connectionCount: prev.connectionCount + 1,
          connectionHistory: [...prev.connectionHistory, `Connected at ${new Date().toLocaleTimeString()}`].slice(-10)
        }));
      });
      
      socketService.socket.on('disconnect', () => {
        setSocketDebug(prev => ({
          ...prev,
          connectionHistory: [...prev.connectionHistory, `Disconnected at ${new Date().toLocaleTimeString()}`].slice(-10)
        }));
      });
    }
    
    // Initial update
    updateDebugInfo();
    
    return () => {
      clearInterval(interval);
    };
  }, []);
  const [roomCode, setRoomCode] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [isJoining, setIsJoining] = useState(false);
  const [error, setError] = useState('');
  const [debugInfo, setDebugInfo] = useState('');
  const [games, setGames] = useState<GameListItem[]>([]);
  const [isLoadingGames, setIsLoadingGames] = useState(false);
  const navigate = useNavigate();

  // Load games list on component mount and refresh periodically
  useEffect(() => {
    loadGamesList();
    
    // Refresh games list every 10 seconds
    const interval = setInterval(loadGamesList, 10000);
    
    return () => clearInterval(interval);
  }, []);

  const loadGamesList = async () => {
    setIsLoadingGames(true);
    try {
      console.log('üìã Loading games list...');
      const response = await fetch('/api/games');
      const data = await response.json();
      
      if (data.success) {
        setGames(data.games || []);
        console.log(`‚úÖ Loaded ${data.games?.length || 0} games`);
      } else {
        console.error('Failed to load games list:', data.error);
      }
    } catch (err) {
      console.error('Error loading games list:', err);
    }
    setIsLoadingGames(false);
  };

  // Better error handling function
  const handleApiResponse = async (response: Response) => {
    const contentType = response.headers.get('content-type');
    
    if (!response.ok) {
      if (!contentType?.includes('application/json')) {
        const text = await response.text();
        throw new Error(`HTTP ${response.status}: Server returned HTML instead of JSON. Check if backend is running and proxy is configured.`);
      }
    }
    
    if (contentType?.includes('application/json')) {
      return await response.json();
    } else {
      const text = await response.text();
      throw new Error(`Expected JSON but got: ${contentType}. Response: ${text.substring(0, 100)}...`);
    }
  };

  // Test backend directly first
  const testBackendDirect = async () => {
    setDebugInfo('Testing backend directly...');
    try {
      console.log('üß™ Testing backend directly: http://localhost:3001/api/games/test');
      const response = await fetch('http://localhost:3001/api/games/test');
      const data = await handleApiResponse(response);
      
      if (data.success) {
        setDebugInfo(`‚úÖ Backend direct test PASSED! ${data.message}`);
        setError('');
      } else {
        setDebugInfo('‚ùå Backend direct test failed');
        setError(JSON.stringify(data));
      }
    } catch (err: any) {
      setDebugInfo('‚ùå Backend direct test failed');
      setError(`Direct backend test failed: ${err.message}`);
      console.error('Backend direct test failed:', err);
    }
  };

  // Test API connection through proxy
  const testApiConnection = async () => {
    setDebugInfo('Testing API connection through proxy...');
    try {
      console.log('üß™ Testing: /api/games/test (through proxy)');
      const response = await fetch('/api/games/test');
      const data = await handleApiResponse(response);
      
      if (data.success) {
        setDebugInfo(`‚úÖ Proxy test PASSED! ${data.message}`);
        setError('');
        // Also refresh games list after successful test
        loadGamesList();
      } else {
        setDebugInfo('‚ùå Proxy test failed');
        setError(JSON.stringify(data));
      }
    } catch (err: any) {
      setDebugInfo('‚ùå Proxy test failed');
      setError(`Proxy test failed: ${err.message}`);
      console.error('Proxy test failed:', err);
    }
  };

  const handleCreateRoom = async () => {
    setIsCreating(true);
    setError('');
    
    try {
      console.log('üéÆ Creating game...');
      
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      
      const response = await fetch('/api/games/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          userId: user.id || `user_${Date.now()}`,
          username: user.username || 'Anonymous',
          debug: true 
        })
      });

      const data = await handleApiResponse(response);
      
      if (data.success && data.gameCode) {
        console.log('üéâ Navigating to room:', data.gameCode);
        // Refresh games list before navigating
        loadGamesList();
        navigate(`/room/${data.gameCode}`);
      } else {
        setError(data.error || 'Failed to create game');
      }
    } catch (err: any) {
      console.error('üí• Error creating game:', err);
      setError(err.message);
    }
    
    setIsCreating(false);
  };

  const handleJoinRoom = async () => {
    if (!roomCode.trim()) {
      setError('Please enter a room code');
      return;
    }
    
    setIsJoining(true);
    setError('');

    try {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      
      const response = await fetch('/api/games/join', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          gameCode: roomCode.trim().toUpperCase(),
          userId: user.id || `user_${Date.now()}`,
          username: user.username || 'Anonymous'
        })
      });

      const data = await handleApiResponse(response);
      
      if (data.success && data.gameCode) {
        console.log('üéâ Navigating to room:', data.gameCode);
        navigate(`/room/${data.gameCode}`);
      } else {
        setError(data.error || 'Failed to join game');
      }
    } catch (err: any) {
      console.error('üí• Error joining game:', err);
      setError(err.message);
    }
    
    setIsJoining(false);
  };

  const handleJoinGameFromList = async (gameCode: string) => {
    try {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      
      const response = await fetch('/api/games/join', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          gameCode: gameCode,
          userId: user.id || `user_${Date.now()}`,
          username: user.username || 'Anonymous'
        })
      });

      const data = await handleApiResponse(response);
      
      if (data.success) {
        console.log('üéâ Navigating to room:', gameCode);
        navigate(`/room/${gameCode}`);
      } else {
        setError(data.error || 'Failed to join game');
      }
    } catch (err: any) {
      console.error('üí• Error joining game from list:', err);
      setError(err.message);
    }
  };

  const handleRoomCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setRoomCode(e.target.value.toUpperCase());
    if (error) setError('');
  };

  const getTimeAgo = (timestamp: string) => {
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now.getTime() - time.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return 'just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours}h ago`;
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays}d ago`;
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-6xl mx-auto p-6">
        {/* Socket Debug Panel */}
        <div className="mb-6 bg-yellow-50 border-2 border-yellow-200 rounded-lg p-4">
          <h2 className="text-lg font-bold text-yellow-800 mb-3">üîß Socket Debug Panel</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm">
            <div className="bg-white p-3 rounded border">
              <h3 className="font-semibold text-gray-700 mb-2">Connection Status</h3>
              <div className={`px-2 py-1 rounded text-white text-center ${socketDebug.isConnected ? 'bg-green-500' : 'bg-red-500'}`}>
                {socketDebug.isConnected ? '‚úÖ Connected' : '‚ùå Disconnected'}
              </div>
              <div className="mt-2 text-xs text-gray-600">
                Socket ID: {socketDebug.socketId}
              </div>
            </div>
            
            <div className="bg-white p-3 rounded border">
              <h3 className="font-semibold text-gray-700 mb-2">Connection Stats</h3>
              <div className="space-y-1">
                <div>Total Connections: <span className="font-mono font-bold text-blue-600">{socketDebug.connectionCount}</span></div>
                <div>Last Activity: <span className="font-mono text-xs">{socketDebug.lastActivity}</span></div>
                <div>Socket Instance: {socketDebug.socketInstance ? '‚úÖ Exists' : '‚ùå Null'}</div>
              </div>
            </div>
            
            <div className="bg-white p-3 rounded border">
              <h3 className="font-semibold text-gray-700 mb-2">Debug Actions</h3>
              <div className="space-y-2">
                <button 
                  onClick={() => {
                    console.log('üîç Socket Service Debug:', socketService);
                    console.log('üîç Current Socket:', socketService.socket);
                    console.log('üîç Window.socketService:', (window as any).socketService);
                  }}
                  className="w-full bg-blue-500 text-white px-2 py-1 rounded text-xs hover:bg-blue-600"
                >
                  Log Socket Info
                </button>
                <button 
                  onClick={() => {
                    socketService.connect();
                    console.log('üîå Manual connection attempt');
                  }}
                  className="w-full bg-green-500 text-white px-2 py-1 rounded text-xs hover:bg-green-600"
                >
                  Connect Socket
                </button>
                <button 
                  onClick={() => {
                    socketService.disconnect();
                    console.log('üîå Manual disconnect');
                  }}
                  className="w-full bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600"
                >
                  Disconnect Socket
                </button>
              </div>
            </div>
          </div>
          
          {socketDebug.connectionHistory.length > 0 && (
            <div className="mt-4 bg-white p-3 rounded border">
              <h3 className="font-semibold text-gray-700 mb-2">Connection History</h3>
              <div className="max-h-32 overflow-y-auto">
                {socketDebug.connectionHistory.map((event, index) => (
                  <div key={index} className="text-xs text-gray-600 font-mono">
                    {event}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      <div className="max-w-6xl mx-auto p-6">
        <h1 className="text-3xl font-bold text-gray-900 mb-8 text-center">Welcome to Codenames!</h1>
        
        {/* MAIN GAME SECTION - Priority #1 */}
        <div className="mb-8">
          {/* Create/Join Game Row */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            {/* Create Game */}
            <div className="bg-white p-8 rounded-lg shadow-lg border border-gray-200">
              <h2 className="text-2xl font-semibold mb-4 text-gray-900">üéÆ Create New Game</h2>
              <p className="text-gray-600 mb-6">Start a new game and invite friends to join</p>
              <button 
                onClick={handleCreateRoom}
                disabled={isCreating}
                className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white py-4 px-6 rounded-lg font-semibold text-lg transition-colors shadow-md"
              >
                {isCreating ? 'Creating...' : 'Create Game'}
              </button>
            </div>
            
            {/* Join Game */}
            <div className="bg-white p-8 rounded-lg shadow-lg border border-gray-200">
              <h2 className="text-2xl font-semibold mb-4 text-gray-900">üö™ Join with Code</h2>
              <div className="space-y-4">
                <div>
                  <label htmlFor="roomCode" className="block text-sm font-medium text-gray-700 mb-2">
                    Game Code
                  </label>
                  <input
                    type="text"
                    id="roomCode"
                    value={roomCode}
                    onChange={handleRoomCodeChange}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-gray-900 bg-white uppercase text-center text-lg font-mono"
                    placeholder="ABCD12"
                    maxLength={6}
                    disabled={isJoining}
                  />
                </div>
                <button 
                  onClick={handleJoinRoom}
                  disabled={isJoining || !roomCode.trim()}
                  className="w-full bg-green-600 hover:bg-green-700 disabled:bg-green-400 text-white py-4 px-6 rounded-lg font-semibold text-lg transition-colors shadow-md"
                >
                  {isJoining ? 'Joining...' : 'Join Game'}
                </button>
              </div>
            </div>
          </div>

          {/* Browse Games Section - Priority #2 */}
          <div className="bg-white p-8 rounded-lg shadow-lg border border-gray-200">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-semibold text-gray-900">üéØ Browse Active Games</h2>
              <button 
                onClick={loadGamesList}
                disabled={isLoadingGames}
                className="text-blue-600 hover:text-blue-800 font-medium flex items-center space-x-1"
              >
                <span>{isLoadingGames ? 'üîÑ Loading...' : 'üîÑ Refresh'}</span>
              </button>
            </div>
            
            {games.length > 0 ? (
              <div className="space-y-4">
                {games.map((game) => (
                  <div key={game.code} className="flex items-center justify-between p-6 bg-gray-50 rounded-lg border border-gray-200 hover:bg-gray-100 transition-colors">
                    <div className="flex-1">
                      <div className="flex items-center space-x-6">
                        <div className="bg-blue-100 text-blue-800 px-4 py-2 rounded-lg font-mono font-bold text-xl">
                          {game.code}
                        </div>
                        <div className="text-gray-600">
                          <div className="flex items-center space-x-4 mb-1">
                            <span className="font-semibold text-lg">{game.playerCount} player{game.playerCount !== 1 ? 's' : ''}</span>
                            <span className="text-sm">‚Ä¢</span>
                            <span className="text-sm">{getTimeAgo(game.lastActivity)}</span>
                            <span className="text-sm">‚Ä¢</span>
                            <span className="text-green-600 capitalize font-medium">{game.status}</span>
                          </div>
                          {game.players.length > 0 && (
                            <div className="text-sm text-gray-500">
                              <span className="font-medium">Players:</span> {game.players.join(', ')}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    <button
                      onClick={() => handleJoinGameFromList(game.code)}
                      className="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg font-semibold text-lg transition-colors shadow-md"
                    >
                      Join Game
                    </button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-16 text-gray-500">
                <div className="text-6xl mb-6">üéÆ</div>
                <p className="text-xl font-semibold">No active games</p>
                <p className="text-lg mt-2">Be the first to create a game!</p>
              </div>
            )}
          </div>
        </div>

        {/* ERROR DISPLAY - Only show if there's an error */}
        {error && (
          <div className="mb-8 bg-red-50 border border-red-200 p-4 rounded-lg">
            <h4 className="font-semibold text-red-900 mb-2">‚ö†Ô∏è Error:</h4>
            <p className="text-red-800 text-sm">{error}</p>
          </div>
        )}

        {/* SECONDARY CONTENT - Chat and Info */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Global Chat */}
          <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
            <h2 className="text-xl font-semibold mb-4 text-gray-900">üí¨ Global Chat</h2>
            <ChatRoom />
            <div className="mt-4 text-sm text-gray-600 bg-blue-50 border border-blue-200 p-3 rounded">
              <p><strong>Global Chat:</strong> Chat with all online players ‚Ä¢ Games have their own room chat!</p>
            </div>
          </div>

          {/* How to Play */}
          <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
            <h3 className="text-xl font-semibold text-gray-900 mb-4">üéØ How to Play</h3>
            <div className="text-gray-700 space-y-3">
              <div className="flex items-start space-x-3">
                <span className="bg-blue-100 text-blue-800 w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">1</span>
                <p><strong>Create Game:</strong> Click "Create Game" to generate a 6-digit code</p>
              </div>
              <div className="flex items-start space-x-3">
                <span className="bg-green-100 text-green-800 w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">2</span>
                <p><strong>Invite Friends:</strong> Share your game code with friends so they can join</p>
              </div>
              <div className="flex items-start space-x-3">
                <span className="bg-purple-100 text-purple-800 w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">3</span>
                <p><strong>Browse Games:</strong> See all active games and join with one click</p>
              </div>
              <div className="flex items-start space-x-3">
                <span className="bg-orange-100 text-orange-800 w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5">4</span>
                <p><strong>Start Playing:</strong> Once in a room, teams and game mechanics coming soon!</p>
              </div>
            </div>
          </div>
        </div>

        {/* DEBUG/ADMIN SECTION - Moved to bottom */}
        <div className="space-y-6">
          {/* Connection Status */}
          <div className="bg-gray-50 border border-gray-200 p-4 rounded-lg">
            <h3 className="font-semibold text-gray-900 mb-3">üîß Connection Status</h3>
            <div className="text-gray-700 space-y-2 text-sm">
              <p>‚úÖ Frontend running ‚Ä¢ ‚úÖ Multiplayer ready ‚Ä¢ ‚úÖ Game browsing active</p>
            </div>
          </div>

          {/* Debug Tools - Collapsed by default */}
          <details className="bg-yellow-50 border border-yellow-200 rounded-lg">
            <summary className="p-4 cursor-pointer font-semibold text-yellow-900">üîß Debug Tools (Click to expand)</summary>
            <div className="p-4 pt-0">
              <div className="flex gap-2 mb-3">
                <button 
                  onClick={testBackendDirect}
                  className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded text-sm"
                >
                  Test Backend Direct
                </button>
                <button 
                  onClick={testApiConnection}
                  className="bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded text-sm"
                >
                  Test Proxy
                </button>
                <button 
                  onClick={loadGamesList}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm"
                >
                  Refresh Games
                </button>
              </div>
              {debugInfo && (
                <div className="bg-yellow-100 p-2 rounded">
                  <p className="text-yellow-800 font-mono text-sm">{debugInfo}</p>
                </div>
              )}
              <div className="mt-2 text-xs text-yellow-700">
                <p><strong>Step 1:</strong> Test Backend Direct (should work if backend is running)</p>
                <p><strong>Step 2:</strong> Test Proxy (should work after restarting frontend)</p>
              </div>
            </div>
          </details>
        </div>
      </div>
    </div>
  );
};

export default HomePage;
