#!/usr/bin/env python3
"""
Fix Authentication Without setTimeout

This script provides a proper fix for the authentication callback issue
without using setTimeout or other timing hacks.
"""

import os
import sys

def fix_authentication_with_callback_storage():
    """Properly fix authentication by storing and invoking callbacks directly"""
    
    socket_service_path = "frontend/src/services/socketService.ts"
    
    if not os.path.exists(socket_service_path):
        print(f"Error: {socket_service_path} not found")
        return False
    
    with open(socket_service_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Add callback storage to track authentication callbacks
    if "private authCallbacks: Array<(data: any) => void> = [];" not in content:
        private_pattern = "private lastAuthenticatedToken: string | null = null;"
        if private_pattern in content:
            content = content.replace(
                private_pattern,
                private_pattern + "\n  private authCallbacks: Array<(data: any) => void> = [];"
            )
            print("‚úÖ Added authentication callback storage")
    
    # Update the onAuthenticated method to store callbacks
    old_on_authenticated = '''  onAuthenticated(callback: (data: any) => void): void {
    this._socket?.on('authenticated', callback);
  }'''
    
    new_on_authenticated = '''  onAuthenticated(callback: (data: any) => void): void {
    // Store the callback for potential immediate invocation
    this.authCallbacks.push(callback);
    
    // Also register with socket for future authentications
    this._socket?.on('authenticated', callback);
  }'''
    
    if old_on_authenticated in content:
        content = content.replace(old_on_authenticated, new_on_authenticated)
        print("‚úÖ Updated onAuthenticated to store callbacks")
    
    # Fix the authenticate method to properly handle callbacks
    old_authenticate = '''  authenticate(token: string): void {
    console.log('üîê AUTHENTICATE() CALLED');
    console.log('üîê Socket exists:', !!this._socket);
    console.log('üîê Socket connected:', this._socket?.connected);
    console.log('üîê Socket ID:', this._socket?.id);
    console.log('üîê Token (first 20 chars):', token?.substring(0, 20) + '...');
    console.log('üîê Last authenticated token:', this.lastAuthenticatedToken?.substring(0, 20) + '...');
    
    // Prevent duplicate authentication with the same token
    if (this.lastAuthenticatedToken === token && this._socket?.connected) {
      console.log('üîê Already authenticated with this token, triggering success callback immediately');
      // Trigger the authenticated callback immediately since we're already authenticated
      setTimeout(() => {
        this._socket?.emit('authenticated', { success: true, user: { token } });
      }, 0);
      return;
    }
    
    this.token = token;
    this.lastAuthenticatedToken = token;
    
    if (this._socket) {
      console.log('üîê Emitting authenticate event to backend');
      this._socket.emit('authenticate', token);
    } else {
      console.log('‚ùå No socket available for authentication');
    }
  }'''
    
    new_authenticate = '''  authenticate(token: string): void {
    console.log('üîê AUTHENTICATE() CALLED');
    console.log('üîê Socket exists:', !!this._socket);
    console.log('üîê Socket connected:', this._socket?.connected);
    console.log('üîê Socket ID:', this._socket?.id);
    console.log('üîê Token (first 20 chars):', token?.substring(0, 20) + '...');
    console.log('üîê Last authenticated token:', this.lastAuthenticatedToken?.substring(0, 20) + '...');
    
    // Prevent duplicate authentication with the same token
    if (this.lastAuthenticatedToken === token && this._socket?.connected) {
      console.log('üîê Already authenticated with this token, invoking callbacks directly');
      
      // Directly invoke all stored authentication callbacks
      const successData = { success: true, user: { token } };
      this.authCallbacks.forEach(callback => {
        try {
          callback(successData);
        } catch (error) {
          console.error('üîê Error in authentication callback:', error);
        }
      });
      
      // Clear callbacks after invoking them
      this.authCallbacks = [];
      return;
    }
    
    this.token = token;
    this.lastAuthenticatedToken = token;
    
    if (this._socket) {
      console.log('üîê Emitting authenticate event to backend');
      this._socket.emit('authenticate', token);
    } else {
      console.log('‚ùå No socket available for authentication');
    }
  }'''
    
    if old_authenticate in content:
        content = content.replace(old_authenticate, new_authenticate)
        print("‚úÖ Updated authenticate method to handle callbacks properly")
    else:
        print("‚ö†Ô∏è  Could not find exact authenticate method - may need manual update")
        return False
    
    # Also clear callbacks when socket events fire normally
    old_setup_listeners = '''    this._socket.on('authenticated', (data: any) => {
      if (data.success) {
        console.log('Authenticated successfully');
      } else {
        console.error('Authentication failed:', data.error);
      }
    });'''
    
    new_setup_listeners = '''    this._socket.on('authenticated', (data: any) => {
      // Clear stored callbacks since normal socket event will handle them
      this.authCallbacks = [];
      
      if (data.success) {
        console.log('Authenticated successfully');
      } else {
        console.error('Authentication failed:', data.error);
      }
    });'''
    
    # This pattern might not exist, so don't fail if we can't find it
    if old_setup_listeners in content:
        content = content.replace(old_setup_listeners, new_setup_listeners)
        print("‚úÖ Updated socket event listener to clear callbacks")
    
    # Clean up callbacks on disconnect
    old_disconnect = '''  disconnect(): void {
    if (this._socket) {
      console.log('üì° Disconnecting socket');
      this._socket.disconnect();
      this._socket = null;
      this.isConnecting = false; // Reset connection state
      this.lastAuthenticatedToken = null; // Reset authentication state
    }
  }'''
    
    new_disconnect = '''  disconnect(): void {
    if (this._socket) {
      console.log('üì° Disconnecting socket');
      this._socket.disconnect();
      this._socket = null;
      this.isConnecting = false; // Reset connection state
      this.lastAuthenticatedToken = null; // Reset authentication state
      this.authCallbacks = []; // Clear any pending callbacks
    }
  }'''
    
    if old_disconnect in content:
        content = content.replace(old_disconnect, new_disconnect)
        print("‚úÖ Added callback cleanup on disconnect")
    
    with open(socket_service_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return True

def remove_previous_timeout_fixes():
    """Remove any setTimeout hacks from previous fixes"""
    
    files_to_clean = [
        "frontend/src/services/socketService.ts",
        "frontend/src/pages/RoomPage.tsx"
    ]
    
    cleaned_count = 0
    
    for file_path in files_to_clean:
        if not os.path.exists(file_path):
            continue
            
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # Remove setTimeout patterns
        content = content.replace("setTimeout(() => {", "// setTimeout removed - using direct callback approach")
        content = content.replace("}, 0);", "")
        content = content.replace("}, 100);", "")
        
        # Remove fallback timeout logic from RoomPage
        fallback_pattern = '''        // Fallback: if we're already connected and authenticated, proceed directly
        setTimeout(() => {
          if (socketService.socket?.connected && !isConnected) {
            console.log('üîÑ [ROOMPAGE] Fallback: Authentication may have been skipped, proceeding directly');
            handleAuth();
          }
        }, 100);'''
        
        content = content.replace(fallback_pattern, "// Fallback timeout removed - using direct callback approach")
        
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            cleaned_count += 1
            print(f"‚úÖ Cleaned setTimeout hacks from {file_path}")
    
    return cleaned_count > 0

def main():
    print("üîß Fixing Authentication Without setTimeout...")
    print("=" * 50)
    
    success_count = 0
    
    # Remove any previous setTimeout hacks
    if remove_previous_timeout_fixes():
        success_count += 1
    
    # Implement proper callback-based solution
    if fix_authentication_with_callback_storage():
        success_count += 1
    
    print("=" * 50)
    if success_count >= 1:
        print("‚úÖ Proper authentication fix applied!")
        print("\nüéØ What was fixed:")
        print("1. ‚úÖ Removed all setTimeout hacks (bad practice)")
        print("2. ‚úÖ Added callback storage system to socketService")
        print("3. ‚úÖ Direct callback invocation when authentication is skipped")
        print("4. ‚úÖ Proper cleanup of callbacks to prevent memory leaks")
        print("\nüöÄ How it works now:")
        print("- onAuthenticated() stores callbacks for immediate use")
        print("- authenticate() directly invokes callbacks when skipping")
        print("- No timing dependencies or race conditions")
        print("- Deterministic and testable behavior")
        print("\nüöÄ Next steps:")
        print("1. Restart your frontend")
        print("2. Try creating a game - should work immediately")
        print("3. No more 'Loading game...' hanging!")
        print("\nüí° This is a proper, deterministic solution without timing hacks!")
    else:
        print(f"‚ö†Ô∏è  Fix could not be applied. Check error messages above.")
    
    return success_count >= 1

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)