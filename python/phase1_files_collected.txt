Phase 1 Frontend Files Collection
Generated: 2025-05-30 14:05:09

Purpose: Debug login input autocomplete and API connection issues for Phase 1 Socket Foundation

================================================================================
COLLECTION SUMMARY
================================================================================

Files Collected: 7/7
Missing Files: 0


================================================================================
FILE: frontend/src/pages/LoginPage.tsx
SIZE: 3349 bytes
================================================================================

import React, { useState } from 'react';
import authService from '../services/authService';

interface LoginPageProps {
  onLogin: (user: any, token: string) => void;
}

const LoginPage: React.FC<LoginPageProps> = ({ onLogin }) => {
  const [username, setUsername] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!username.trim()) {
      setError('Username is required');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      console.log('Attempting login with username:', username.trim());
      const result = await authService.login(username.trim());
      console.log('Login result:', result);
      
      if (result.success && result.token && result.user) {
        console.log('Login successful');
        onLogin(result.user, result.token);
      } else {
        console.log('Login failed:', result.error);
        setError(result.error || 'Login failed');
      }
    } catch (err) {
      console.error('Login error:', err);
      setError('Failed to connect to server');
    }

    setIsLoading(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUsername(e.target.value);
    if (error) setError(''); // Clear error when user starts typing
  };

  return (
    <div className="min-h-[60vh] flex items-center justify-center">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold text-center mb-6">Join Codenames</h2>
        
        <form onSubmit={handleSubmit} className="space-y-4" autoComplete="off">
          <div>
            <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-2">
              Choose a Username
            </label>
            <input
              type="text"
              id="username"
              name="username"
              value={username}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter your username"
              disabled={isLoading}
              autoComplete="off"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
              data-lpignore="true"
            />
          </div>
          
          {error && (
            <div className="text-red-600 text-sm bg-red-50 p-2 rounded">{error}</div>
          )}
          
          <button
            type="submit"
            disabled={isLoading || !username.trim()}
            className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 text-white py-2 px-4 rounded-md font-medium transition-colors"
          >
            {isLoading ? 'Connecting...' : 'Join Game'}
          </button>
        </form>
        
        <div className="mt-6 text-center text-sm text-gray-600">
          <p>Enter any username to join or create an account</p>
          <p className="mt-2 text-xs">Debug: Check browser console for error details</p>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;



================================================================================
FILE: frontend/src/services/authService.ts
SIZE: 1981 bytes
================================================================================

export interface LoginResponse {
  success: boolean;
  token?: string;
  user?: {
    id: string;
    username: string;
  };
  error?: string;
}

class AuthService {
  private readonly API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

  async login(username: string): Promise<LoginResponse> {
    try {
      const response = await fetch(`${this.API_URL}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username }),
      });

      const data = await response.json();
      
      if (data.success && data.token) {
        localStorage.setItem('token', data.token);
        localStorage.setItem('user', JSON.stringify(data.user));
      }

      return data;
    } catch (error) {
      console.error('Login error:', error);
      return {
        success: false,
        error: 'Failed to connect to server'
      };
    }
  }

  async verifyToken(token: string): Promise<LoginResponse> {
    try {
      const response = await fetch(`${this.API_URL}/api/auth/verify`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token }),
      });

      return await response.json();
    } catch (error) {
      console.error('Token verification error:', error);
      return {
        success: false,
        error: 'Failed to verify token'
      };
    }
  }

  logout(): void {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  }

  getToken(): string | null {
    return localStorage.getItem('token');
  }

  getUser(): any {
    const userStr = localStorage.getItem('user');
    return userStr ? JSON.parse(userStr) : null;
  }

  isAuthenticated(): boolean {
    return !!this.getToken();
  }
}

export const authService = new AuthService();
export default authService;



================================================================================
FILE: frontend/src/services/socketService.ts
SIZE: 3803 bytes
================================================================================

import { io, Socket } from 'socket.io-client';

export interface User {
  id: string;
  username: string;
  socketId?: string;
}

export interface Room {
  id: string;
  name: string;
  code: string;
  maxPlayers: number;
  users: Array<{
    user: User;
    role: string;
    team?: string;
  }>;
}

export interface ChatMessage {
  id: string;
  username: string;
  message: string;
  timestamp: string;
}

class SocketService {
  private socket: Socket | null = null;
  private token: string | null = null;

  connect(): Socket {
    if (this.socket?.connected) {
      return this.socket;
    }

    this.socket = io(import.meta.env.VITE_SOCKET_URL || 'http://localhost:3001', {
      autoConnect: false,
      transports: ['websocket', 'polling']
    });

    this.setupEventListeners();
    this.socket.connect();

    return this.socket;
  }

  disconnect(): void {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }
  }

  authenticate(token: string): void {
    this.token = token;
    if (this.socket) {
      this.socket.emit('authenticate', token);
    }
  }

  joinRoom(roomCode: string): void {
    if (this.socket) {
      this.socket.emit('join-room', { roomCode });
    }
  }

  leaveRoom(): void {
    if (this.socket) {
      this.socket.emit('leave-room');
    }
  }

  createRoom(roomName?: string): void {
    if (this.socket) {
      this.socket.emit('create-room', { roomName });
    }
  }

  sendMessage(message: string): void {
    if (this.socket) {
      this.socket.emit('chat-message', { message });
    }
  }

  // Event listener registration methods
  onAuthenticated(callback: (data: any) => void): void {
    this.socket?.on('authenticated', callback);
  }

  onRoomJoined(callback: (data: any) => void): void {
    this.socket?.on('room-joined', callback);
  }

  onRoomCreated(callback: (data: any) => void): void {
    this.socket?.on('room-created', callback);
  }

  onUserJoined(callback: (data: any) => void): void {
    this.socket?.on('user-joined', callback);
  }

  onUserLeft(callback: (data: any) => void): void {
    this.socket?.on('user-left', callback);
  }

  onRoomUsersUpdated(callback: (data: { users: User[] }) => void): void {
    this.socket?.on('room-users-updated', callback);
  }

  onChatMessage(callback: (message: ChatMessage) => void): void {
    this.socket?.on('chat-message', callback);
  }

  onError(callback: (error: any) => void): void {
    this.socket?.on('error', callback);
  }

  onConnect(callback: () => void): void {
    this.socket?.on('connect', callback);
  }

  onDisconnect(callback: () => void): void {
    this.socket?.on('disconnect', callback);
  }

  // Cleanup method to remove specific listeners
  off(event: string, callback?: Function): void {
    if (callback) {
      this.socket?.off(event, callback);
    } else {
      this.socket?.off(event);
    }
  }

  private setupEventListeners(): void {
    if (!this.socket) return;

    this.socket.on('connect', () => {
      console.log('Connected to server');
      // Re-authenticate if we have a token
      if (this.token) {
        this.authenticate(this.token);
      }
    });

    this.socket.on('disconnect', () => {
      console.log('Disconnected from server');
    });

    this.socket.on('connect_error', (error) => {
      console.error('Connection error:', error);
    });
  }

  get isConnected(): boolean {
    return this.socket?.connected || false;
  }

  get socketId(): string | undefined {
    return this.socket?.id;
  }
}

// Export singleton instance
export const socketService = new SocketService();
export default socketService;



================================================================================
FILE: frontend/src/App.tsx
SIZE: 3455 bytes
================================================================================

import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import LoginPage from './pages/LoginPage';
import HomePage from './pages/HomePage';
import RoomPage from './pages/RoomPage';
import authService from './services/authService';
import socketService from './services/socketService';
import './App.css';

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<any>(null);

  useEffect(() => {
    const initAuth = async () => {
      const token = authService.getToken();
      const savedUser = authService.getUser();

      if (token && savedUser) {
        // Verify token is still valid
        const result = await authService.verifyToken(token);
        if (result.success) {
          setIsAuthenticated(true);
          setUser(savedUser);
          // Initialize socket connection with token
          socketService.connect();
          socketService.authenticate(token);
        } else {
          authService.logout();
        }
      }
      setIsLoading(false);
    };

    initAuth();
  }, []);

  const handleLogin = (userData: any, token: string) => {
    setIsAuthenticated(true);
    setUser(userData);
    // Connect to socket after successful login
    socketService.connect();
    socketService.authenticate(token);
  };

  const handleLogout = () => {
    authService.logout();
    socketService.disconnect();
    setIsAuthenticated(false);
    setUser(null);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl">Loading...</div>
      </div>
    );
  }

  return (
    <Router>
      <div className="App min-h-screen bg-gray-50">
        <header className="bg-blue-600 text-white p-4 shadow-lg">
          <div className="container mx-auto flex justify-between items-center">
            <h1 className="text-2xl font-bold">Codenames</h1>
            {isAuthenticated && (
              <div className="flex items-center space-x-4">
                <span>Welcome, {user?.username}!</span>
                <button
                  onClick={handleLogout}
                  className="bg-blue-700 hover:bg-blue-800 px-4 py-2 rounded text-sm"
                >
                  Logout
                </button>
              </div>
            )}
          </div>
        </header>
        
        <main className="container mx-auto p-4">
          <Routes>
            <Route 
              path="/login" 
              element={
                !isAuthenticated ? 
                <LoginPage onLogin={handleLogin} /> : 
                <Navigate to="/" replace />
              } 
            />
            <Route 
              path="/" 
              element={
                isAuthenticated ? 
                <HomePage /> : 
                <Navigate to="/login" replace />
              } 
            />
            <Route 
              path="/room/:roomCode" 
              element={
                isAuthenticated ? 
                <RoomPage /> : 
                <Navigate to="/login" replace />
              } 
            />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

export default App;



================================================================================
FILE: frontend/src/hooks/useSocket.ts
SIZE: 3963 bytes
================================================================================

import { useEffect, useRef, useState } from 'react';
import socketService, { User, Room, ChatMessage } from '../services/socketService';

export const useSocket = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [currentRoom, setCurrentRoom] = useState<Room | null>(null);
  const [roomUsers, setRoomUsers] = useState<User[]>([]);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [connectionError, setConnectionError] = useState<string | null>(null);

  // Use refs to store callbacks to avoid re-registering listeners
  const handlersRef = useRef({
    onConnect: () => {
      setIsConnected(true);
      setConnectionError(null);
    },
    onDisconnect: () => {
      setIsConnected(false);
    },
    onAuthenticated: (data: any) => {
      if (data.success) {
        console.log('Authenticated successfully');
      } else {
        console.error('Authentication failed:', data.error);
        setConnectionError(data.error);
      }
    },
    onRoomJoined: (data: any) => {
      setCurrentRoom(data.room);
      setMessages([]); // Clear messages when joining new room
      console.log('Joined room:', data.room.code);
    },
    onRoomCreated: (data: any) => {
      console.log('Room created:', data.room.code);
    },
    onUserJoined: (data: any) => {
      console.log('User joined:', data.username);
    },
    onUserLeft: (data: any) => {
      console.log('User left:', data.username);
    },
    onRoomUsersUpdated: (data: { users: User[] }) => {
      setRoomUsers(data.users);
    },
    onChatMessage: (message: ChatMessage) => {
      setMessages(prev => [...prev, message]);
    },
    onError: (error: any) => {
      console.error('Socket error:', error);
      setConnectionError(error.message);
    }
  });

  useEffect(() => {
    const socket = socketService.connect();
    const handlers = handlersRef.current;

    // Register event listeners
    socketService.onConnect(handlers.onConnect);
    socketService.onDisconnect(handlers.onDisconnect);
    socketService.onAuthenticated(handlers.onAuthenticated);
    socketService.onRoomJoined(handlers.onRoomJoined);
    socketService.onRoomCreated(handlers.onRoomCreated);
    socketService.onUserJoined(handlers.onUserJoined);
    socketService.onUserLeft(handlers.onUserLeft);
    socketService.onRoomUsersUpdated(handlers.onRoomUsersUpdated);
    socketService.onChatMessage(handlers.onChatMessage);
    socketService.onError(handlers.onError);

    return () => {
      // Cleanup listeners
      socketService.off('connect', handlers.onConnect);
      socketService.off('disconnect', handlers.onDisconnect);
      socketService.off('authenticated', handlers.onAuthenticated);
      socketService.off('room-joined', handlers.onRoomJoined);
      socketService.off('room-created', handlers.onRoomCreated);
      socketService.off('user-joined', handlers.onUserJoined);
      socketService.off('user-left', handlers.onUserLeft);
      socketService.off('room-users-updated', handlers.onRoomUsersUpdated);
      socketService.off('chat-message', handlers.onChatMessage);
      socketService.off('error', handlers.onError);
    };
  }, []);

  const authenticate = (token: string) => {
    socketService.authenticate(token);
  };

  const joinRoom = (roomCode: string) => {
    socketService.joinRoom(roomCode);
  };

  const leaveRoom = () => {
    socketService.leaveRoom();
    setCurrentRoom(null);
    setRoomUsers([]);
    setMessages([]);
  };

  const createRoom = (roomName?: string) => {
    socketService.createRoom(roomName);
  };

  const sendMessage = (message: string) => {
    socketService.sendMessage(message);
  };

  return {
    isConnected,
    currentRoom,
    roomUsers,
    messages,
    connectionError,
    authenticate,
    joinRoom,
    leaveRoom,
    createRoom,
    sendMessage
  };
};



================================================================================
FILE: frontend/.env
SIZE: 136 bytes
================================================================================

# API Configuration
VITE_API_URL=http://localhost:3001
VITE_WS_URL=http://localhost:3001

# Environment
VITE_NODE_ENV=development



================================================================================
FILE: python/fix_login_input.py
SIZE: 4622 bytes
================================================================================

#!/usr/bin/env python3
"""
Fix login input issues - disable autocomplete and improve input handling
"""

import os

def fix_login_page():
    """Fix the LoginPage component to prevent autocomplete issues"""
    frontend_src = "../frontend/src"
    
    # Updated LoginPage with better input handling
    login_page_fixed = '''import React, { useState } from 'react';
import authService from '../services/authService';

interface LoginPageProps {
  onLogin: (user: any, token: string) => void;
}

const LoginPage: React.FC<LoginPageProps> = ({ onLogin }) => {
  const [username, setUsername] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!username.trim()) {
      setError('Username is required');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      console.log('Attempting login with username:', username.trim());
      const result = await authService.login(username.trim());
      console.log('Login result:', result);
      
      if (result.success && result.token && result.user) {
        console.log('Login successful');
        onLogin(result.user, result.token);
      } else {
        console.log('Login failed:', result.error);
        setError(result.error || 'Login failed');
      }
    } catch (err) {
      console.error('Login error:', err);
      setError('Failed to connect to server');
    }

    setIsLoading(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUsername(e.target.value);
    if (error) setError(''); // Clear error when user starts typing
  };

  return (
    <div className="min-h-[60vh] flex items-center justify-center">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold text-center mb-6">Join Codenames</h2>
        
        <form onSubmit={handleSubmit} className="space-y-4" autoComplete="off">
          <div>
            <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-2">
              Choose a Username
            </label>
            <input
              type="text"
              id="username"
              name="username"
              value={username}
              onChange={handleInputChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter your username"
              disabled={isLoading}
              autoComplete="off"
              autoCorrect="off"
              autoCapitalize="off"
              spellCheck="false"
              data-lpignore="true"
            />
          </div>
          
          {error && (
            <div className="text-red-600 text-sm bg-red-50 p-2 rounded">{error}</div>
          )}
          
          <button
            type="submit"
            disabled={isLoading || !username.trim()}
            className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 text-white py-2 px-4 rounded-md font-medium transition-colors"
          >
            {isLoading ? 'Connecting...' : 'Join Game'}
          </button>
        </form>
        
        <div className="mt-6 text-center text-sm text-gray-600">
          <p>Enter any username to join or create an account</p>
          <p className="mt-2 text-xs">Debug: Check browser console for error details</p>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;
'''
    
    login_path = os.path.join(frontend_src, "pages", "LoginPage.tsx")
    with open(login_path, 'w', encoding='utf-8') as f:
        f.write(login_page_fixed)
    
    print("SUCCESS: Fixed LoginPage with better input handling")

def main():
    """Main execution function"""
    print("Fixing login input issues...")
    
    try:
        fix_login_page()
        print("\nSUCCESS: Fixed login input problems!")
        print("\nChanges made:")
        print("- Disabled browser autocomplete")
        print("- Added better input change handling")
        print("- Added console logging for debugging")
        print("- Improved error display")
        print("- Added visual feedback")
        
        print("\nNext steps:")
        print("1. Refresh your browser page")
        print("2. Try typing in the username field")
        print("3. Open browser console (F12) to see debug logs")
        
    except Exception as e:
        print(f"ERROR: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())


