================================================================================
COMBINED FILES FOR CLAUDE IMPORT
Generated from 5 files
================================================================================

TABLE OF CONTENTS:
 1. frontend/vite.config.ts
 2. backend/src/index.ts
 3. frontend/src/services/socketService.ts
 4. frontend/src/services/gameService.ts
 5. RAILWAY_DEPLOYMENT.md

================================================================================

============================================================
FILE: frontend/vite.config.ts
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\vite.config.ts
SIZE: 1237 characters
============================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    port: 5173,
    host: '0.0.0.0',
    proxy: {
      '/api': {
        target: 'http://localhost:3001',
        changeOrigin: true,
        secure: false,
      }
    }
  },
  preview: {
    port: 4173,
    host: '0.0.0.0',
    allowedHosts: ['frontend-production-acc1.up.railway.app']
  },
  build: {
    outDir: 'dist',
    sourcemap: false,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom', 'react-router-dom'],
          socket: ['socket.io-client']
        }
      }
    }
  },
  // Ensure environment variables are available
  define: {
    'import.meta.env.VITE_API_URL': JSON.stringify(process.env.VITE_API_URL || 'https://backend-production-8bea.up.railway.app'),
    'import.meta.env.VITE_WS_URL': JSON.stringify(process.env.VITE_WS_URL || 'https://backend-production-8bea.up.railway.app'),
    'import.meta.env.VITE_NODE_ENV': JSON.stringify(process.env.VITE_NODE_ENV || 'production')
  }
})


============================================================
FILE: backend/src/index.ts
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\backend\src\index.ts
SIZE: 9625 characters
============================================================
import { gameLobbies, scheduleClosedLobbyCleanup } from './routes/gameLobbies';
import express, { Request, Response, NextFunction } from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import dotenv from 'dotenv';
import gameRoutes from './routes/games';
import gameLobbyRoutes from './routes/gameLobbies';
import { handleSocketConnection, setUsersMap } from './socket/socketHandlers';

// Load environment variables
dotenv.config();

console.log('🚀 Starting Codenames backend server...');

const app = express();
const server = createServer(app);

// CORS configuration for production deployment
const corsOptions = {
  origin: [
    "http://localhost:5173",
    process.env.FRONTEND_URL || "http://localhost:5173",
    // Allow any IP on local network for mobile testing
    /^http:\/\/192\.168\.\d{1,3}\.\d{1,3}:5173$/,
    /^http:\/\/10\.\d{1,3}\.\d{1,3}\.\d{1,3}:5173$/,
    /^http:\/\/172\.16\.\d{1,3}\.\d{1,3}:5173$/,
    // Production Railway domains
    /^https:\/\/.*\.railway\.app$/,
    /^https:\/\/.*\.up\.railway\.app$/
  ],
  methods: ["GET", "POST", "PUT", "DELETE"],
  credentials: true
};

app.use(cors(corsOptions));
app.use(express.json());

console.log('📦 Express middleware configured');

// ========================================
// SHARED VARIABLES FOR SOCKET HANDLERS
// ========================================

// In-memory storage for deployment (will migrate to DB later)
const users = new Map<string, any>();
const rooms = new Map<string, any>();
const connectedUsers = new Map<string, any>();
const userRooms = new Map<string, string>();

// Prisma client ready for future database migration
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient({
  // Optional: Disable Prisma for now, enable when ready for DB migration
  log: process.env.NODE_ENV === 'production' ? [] : ['query', 'info', 'warn', 'error']
});

// Debug function to log users
function logUsers() {
  console.log('👥 Current users in memory:', users.size);
  for (const [userId, userData] of users.entries()) {
    console.log(`   - ${userData.username} (${userId}) token: ${userData.token.substring(0, 20)}...`);
  }
}

// ========================================
// API ROUTES
// ========================================

// Health check endpoint
app.get('/api/health', (req: Request, res: Response): void => {
  console.log('🏥 Health check endpoint called');
  res.json({ 
    status: 'OK', 
    message: 'Codenames backend server is running',
    timestamp: new Date().toISOString(),
    connectedUsers: connectedUsers.size,
    activeRooms: rooms.size,
    totalUsers: users.size,
    environment: process.env.NODE_ENV || 'development',
    endpoints: [
      'GET /api/health',
      'POST /api/auth/login', 
      'POST /api/auth/verify',
      'GET /api/games/test',
      'POST /api/games/create',
      'POST /api/games/join'
    ]
  });
});

// Games routes
// Add io instance to request for real-time updates
app.use((req: any, res, next) => {
  req.io = io;
  next();
});

app.use('/api/games', gameRoutes);
app.use('/api/gamelobbies', gameLobbyRoutes);

// Auth routes
app.post('/api/auth/login', (req: Request, res: Response): void => {
  try {
    console.log('🔑 Login attempt:', req.body);
    
    const { username } = req.body;
    if (!username || username.trim().length === 0) {
      res.status(400).json({
        success: false,
        error: 'Username is required'
      });
      return;
    }
    
    // Create simple user for deployment
    const user = {
      id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      username: username.trim(),
      createdAt: new Date().toISOString()
    };
    
    // Simple token
    const token = `token_${user.id}_${Date.now()}`;
    
    // Store user in memory (for now)
    users.set(user.id, { ...user, token });
    
    console.log('✅ Login successful for:', username, 'User ID:', user.id);
    console.log('🎫 Generated token:', token.substring(0, 30) + '...');
    
    // Log current users for debugging
    logUsers();
    
    res.json({
      success: true,
      token,
      user: {
        id: user.id,
        username: user.username
      }
    });
    
  } catch (error) {
    console.error('❌ Login error:', error);
    res.status(500).json({
      success: false,
      error: 'Login failed',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Token verification
app.post('/api/auth/verify', (req: Request, res: Response): void => {
  try {
    console.log('🔍 Token verification attempt');
    
    const { token } = req.body;
    if (!token) {
      res.status(400).json({
        success: false,
        error: 'Token is required'
      });
      return;
    }
    
    console.log('🔍 Verifying token:', token.substring(0, 30) + '...');
    
    // Find user by token
    let foundUser = null;
    for (const [userId, userData] of users.entries()) {
      if (userData.token === token) {
        foundUser = userData;
        break;
      }
    }
    
    if (!foundUser) {
      console.log('❌ Token not found in users map');
      logUsers();
      res.status(401).json({
        success: false,
        error: 'Invalid token'
      });
      return;
    }
    
    console.log('✅ Token verification successful for:', foundUser.username);
    
    res.json({
      success: true,
      user: {
        id: foundUser.id,
        username: foundUser.username
      }
    });
    
  } catch (error) {
    console.error('❌ Token verification error:', error);
    res.status(500).json({
      success: false,
      error: 'Token verification failed',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Get user's current authorized games
app.get('/api/auth/user-games', (req: Request, res: Response): void => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    
    if (!token) {
      res.status(401).json({
        success: false,
        error: 'Authorization token required'
      });
      return;
    }
    
    // Find user by token
    let foundUser = null;
    for (const [userId, userData] of users.entries()) {
      if (userData.token === token) {
        foundUser = userData;
        break;
      }
    }
    
    if (!foundUser) {
      res.status(401).json({
        success: false,
        error: 'Invalid token'
      });
      return;
    }
    
    // For now, return empty games array - will be populated as users join games
    res.json({
      success: true,
      games: [],
      user: {
        id: foundUser.id,
        username: foundUser.username
      }
    });
    
  } catch (error) {
    console.error('❌ Error fetching user games:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch user games'
    });
  }
});

console.log('🔗 API routes configured');

// ========================================
// SOCKET.IO SETUP
// ========================================

const io = new Server(server, {
    cors: corsOptions,
    transports: ['websocket', 'polling'],
});

console.log('📡 Socket.io configured - all handlers in socketHandlers.ts');

// Share the users map with socketHandlers.ts so authentication works
setUsersMap(users);

io.on('connection', (socket) => {
    console.log('📡 New socket connection:', socket.id);
    
    // All socket handling is delegated to socketHandlers.ts
    handleSocketConnection(io, socket, {} as any);
});

console.log('📡 Socket.io setup complete');

// ========================================
// ERROR HANDLING
// ========================================

// 404 handler for API routes
app.use('/api/*', (req: Request, res: Response): void => {
  console.log(`❌ API route not found: ${req.method} ${req.path}`);
  res.status(404).json({ 
    success: false, 
    error: 'API endpoint not found',
    path: req.path,
    method: req.method,
    availableEndpoints: [
      'GET /api/health',
      'POST /api/auth/login',
      'POST /api/auth/verify',
      'GET /api/games/test',
      'POST /api/games/create',
      'POST /api/games/join'
    ]
  });
});

// General error handler
app.use((err: any, req: Request, res: Response, next: NextFunction): void => {
  console.error('❌ Server error:', err);
  res.status(500).json({ 
    success: false, 
    error: 'Internal server error',
    message: err instanceof Error ? err.message : 'Unknown error'
  });
});

// ========================================
// START SERVER
// ========================================

const PORT = Number(process.env.PORT) || 3001;

server.listen(Number(PORT), '0.0.0.0', () => {
  console.log('');
  console.log('🎉 ================================');
  console.log(`🚀 Codenames Server running on port ${PORT}`);
  console.log(`📱 Mobile access: http://192.168.86.148:${PORT}`);
  console.log('📡 Socket.io using unified socketHandlers.ts');
  console.log(`🔗 API endpoints: http://localhost:${PORT}/api`);
  console.log(`🏥 Health check: http://localhost:${PORT}/api/health`);
  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log('✅ All systems ready!');
  console.log('🎉 ================================');
  console.log('');
});

// Graceful shutdown for production
process.on('SIGTERM', async () => {
  console.log('🛑 SIGTERM received, shutting down gracefully');
  await prisma.$disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('🛑 SIGINT received, shutting down gracefully');  
  await prisma.$disconnect();
  process.exit(0);
});

export default app;


============================================================
FILE: frontend/src/services/socketService.ts
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\services\socketService.ts
SIZE: 5000 characters
============================================================
import { io, Socket } from 'socket.io-client';

export interface User {
  id: string;
  username: string;
  socketId?: string;
}

export interface Room {
  id: string;
  name: string;
  code: string;
  maxPlayers: number;
  users: Array<{
    user: User;
    role: string;
    team?: string;
  }>;
}

export interface ChatMessage {
  id: string;
  username: string;
  message: string;
  timestamp: string;
}

const SOCKET_URL = (import.meta as any).env.VITE_WS_URL || 'https://backend-production-8bea.up.railway.app';

class SocketService {
  private _socket: Socket | null = null;
  private token: string | null = null;
  private isConnecting: boolean = false;
  private connectionCounter: number = 0;
  private lastAuthenticatedToken: string | null = null;

  get socket(): Socket | null {
    return this._socket;
  }

  connect(): Socket {
    this.connectionCounter++;
    console.log('🔌 CONNECT() CALLED #' + this.connectionCounter);

    // Make socket service accessible for debugging
    (window as any).socketService = this;

    // Check if already connected
    if (this._socket?.connected) {
      console.log('📡 Socket already connected, reusing existing connection');
      return this._socket;
    }

    // Check if connection is in progress
    if (this.isConnecting) {
      console.log('📡 Connection already in progress, waiting...');
      return this._socket!;
    }

    // Check if socket exists but is disconnected
    if (this._socket && !this._socket.connected) {
      console.log('📡 Reconnecting existing socket');
      this._socket.connect();
      return this._socket;
    }

    console.log('📡 Creating new socket connection');
    this.isConnecting = true;

    // Dynamic socket URL
    const currentHost = window.location.hostname;
    const isLocalhost = currentHost === 'localhost' || currentHost === '127.0.0.1';
    const socketPort = '3001';
    
    let socketUrl;
    if (import.meta.env.VITE_SOCKET_URL) {
      socketUrl = import.meta.env.VITE_SOCKET_URL;
    } else if (isLocalhost) {
      socketUrl = `http://localhost:${socketPort}`;
    } else {
      socketUrl = `http://${currentHost}:${socketPort}`;
    }

    this._socket = io(socketUrl, {
      autoConnect: false,
      transports: ['websocket', 'polling'],
      timeout: 5000,
      forceNew: false,
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000
    });

    this.setupEventListeners();
    this._socket.connect();

    return this._socket;
  }

  disconnect(): void {
    if (this._socket) {
      console.log('📡 Disconnecting socket');
      this._socket.disconnect();
      this._socket = null;
      this.isConnecting = false;
      this.lastAuthenticatedToken = null;
    }
  }

  authenticate(token: string): void {
    console.log('🔐 [SERVICE] authenticate called, socket connected:', this._socket?.connected);
    
    // Prevent duplicate authentication with the same token
    if (this.lastAuthenticatedToken === token && this._socket?.connected) {
      console.log('🔐 Already authenticated with this token');
      this._socket?.emit('authenticated', { success: true, user: { token } });
      return;
    }
    
    this.token = token;
    this.lastAuthenticatedToken = token;
    
    if (this._socket) {
      console.log('🔐 Emitting authenticate event to backend');
      this._socket.emit('authenticate', token);
    } else {
      console.log('❌ No socket available for authentication');
    }
  }

  // Event listener registration methods
  onAuthenticated(callback: (data: any) => void): void {
    this._socket?.on('authenticated', callback);
  }

  onConnect(callback: () => void): void {
    this._socket?.on('connect', callback);
  }

  onDisconnect(callback: () => void): void {
    this._socket?.on('disconnect', callback);
  }

  // Cleanup method to remove specific listeners
  off(event: string, callback?: Function): void {
    if (callback) {
      this._socket?.off(event, callback as any);
    } else {
      this._socket?.off(event);
    }
  }

  private setupEventListeners(): void {
    if (!this._socket) return;

    this._socket.on('connect', () => {
      console.log('✅ Connected to server, Socket ID:', this._socket?.id);
      this.isConnecting = false;
    });

    this._socket.on('disconnect', (reason) => {
      console.log('❌ Disconnected from server. Reason:', reason);
    });

    this._socket.on('connect_error', (error) => {
      console.error('🚫 Socket connection error:', error);
      this.isConnecting = false;
    });
  }

  get isConnected(): boolean {
    return this._socket?.connected || false;
  }

  get isAuthenticated(): boolean {
    return !!this.lastAuthenticatedToken && this.isConnected;
  }

  get isConnectionReady(): boolean {
    return this._socket?.connected && !this.isConnecting;
  }

  get socketId(): string | undefined {
    return this._socket?.id;
  }
}

// Export singleton instance
export const socketService = new SocketService();
export default socketService;


============================================================
FILE: frontend/src/services/gameService.ts
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\services\gameService.ts
SIZE: 6743 characters
============================================================
// Frontend Game Service - Extends existing socketService for game functionality
import { socketService } from './socketService';
import { CodenamesGame, GamePlayer, TeamColor, PlayerRole, GameClue, CodeCard } from '../types/game';

class GameService {
  // Game management
  createGame(): void {
    socketService.socket?.emit('game:create');
  }

  startGame(): void {
    
    socketService.socket?.emit('game:start');
    
  }

  resetGame(): void {
    socketService.socket?.emit('game:reset');
  }

  // Team and role management
  joinTeam(team: TeamColor, role: PlayerRole): void {
    if (team === 'neutral' || team === 'assassin') {
      console.error('Cannot join neutral or assassin team');
      return;
    }
    socketService.socket?.emit('game:join-team', team, role);
  }

  // Game actions
  giveClue(gameId: string, word: string, number: number): void {
    if (!gameId || !word.trim() || number < 1 || number > 9) {
      console.error('Invalid clue parameters');
      return;
    }
    
    console.log('📡 Emitting game:give-clue event:', { gameId, word: word.trim().toUpperCase(), number });
    socketService.socket?.emit('game:give-clue', { 
      gameId: gameId.toUpperCase(),
      word: word.trim().toUpperCase(), 
      number 
    });
  }

  revealCard(gameId: string, cardId: string): void {
    if (!gameId || !cardId) {
      console.error('Invalid reveal card parameters');
      return;
    }
    
    console.log('📡 Emitting game:reveal-card event:', { gameId, cardId });
    socketService.socket?.emit('game:reveal-card', { 
      gameId: gameId.toUpperCase(), 
      cardId 
    });
  }

  endTurn(gameId: string): void {
    if (!gameId) {
      console.error('Invalid end turn parameters');
      return;
    }
    
    console.log('📡 Emitting game:end-turn event:', { gameId });
    socketService.socket?.emit('game:end-turn', { 
      gameId: gameId.toUpperCase() 
    });
  }

  // Event listeners for game events
  onGameStateUpdated(callback: (game: CodenamesGame) => void): void {
    
    
    const wrappedCallback = (game: CodenamesGame) => {
      console.log('📡 [FRONTEND] Received game:state-updated event');
      console.log('📡 [FRONTEND] Game status:', game.status);
      console.log('📡 [FRONTEND] Board length:', game.board?.length);
      callback(game);
    };
    
    socketService.socket?.on('game:state-updated', wrappedCallback);
  }

  onPlayerJoined(callback: (player: GamePlayer) => void): void {
    socketService.socket?.on('game:player-joined', callback);
  }

  onCardRevealed(callback: (card: CodeCard) => void): void {
    socketService.socket?.on('game:card-revealed', callback);
  }

  onClueGiven(callback: (clue: GameClue) => void): void {
    socketService.socket?.on('game:clue-given', callback);
  }

  onTurnChanged(callback: (newTurn: TeamColor) => void): void {
    socketService.socket?.on('game:turn-changed', callback);
  }

  onGameEnded(callback: (winner: TeamColor) => void): void {
    socketService.socket?.on('game:game-ended', callback);
  }

  onGameError(callback: (error: string) => void): void {
    const wrappedErrorCallback = (error: string) => {
      console.log('❌ [FRONTEND] Received game:error:', error);
      callback(error);
    };
    socketService.socket?.on('game:error', wrappedErrorCallback);
  }

  // Cleanup method
  removeAllGameListeners(): void {
    socketService.socket?.off('game:state-updated');
    socketService.socket?.off('game:player-joined');
    socketService.socket?.off('game:card-revealed');
    socketService.socket?.off('game:clue-given');
    socketService.socket?.off('game:turn-changed');
    socketService.socket?.off('game:game-ended');
    socketService.socket?.off('game:error');
  }

  // Utility methods
  getTeamStats(game: CodenamesGame) {
    // Defensive programming - handle missing board data
    if (!game || !game.board || !Array.isArray(game.board)) {
      console.warn('⚠️ GameService: Missing or invalid board data, returning default stats');
      return {
        red: { total: 0, revealed: 0, remaining: 0 },
        blue: { total: 0, revealed: 0, remaining: 0 }
      };
    }
    
    const redCards = game.board.filter(c => c.team === 'red');
    const blueCards = game.board.filter(c => c.team === 'blue');
    const redRevealed = redCards.filter(c => c.isRevealed).length;
    const blueRevealed = blueCards.filter(c => c.isRevealed).length;

    return {
      red: { 
        total: redCards.length, 
        revealed: redRevealed, 
        remaining: redCards.length - redRevealed 
      },
      blue: { 
        total: blueCards.length, 
        revealed: blueRevealed, 
        remaining: blueCards.length - blueRevealed 
      }
    };
  }

  isPlayerTurn(game: CodenamesGame, player: GamePlayer | null): boolean {
    if (!player) return false;
    
    // In solo mode, it's always the solo team's turn
    if (game.isSoloMode) {
      return player.team === game.soloTeam;
    }
    
    // In classic mode, normal turn rules
    return player.team === game.currentTurn;
  }

  canPlayerGiveClue(game: CodenamesGame, player: GamePlayer | null): boolean {
    if (!player || game.status !== 'playing') {
      return false;
    }
    
    // In solo mode, allow clue giving if:
    // 1. Player is spymaster of solo team
    // 2. No active clue OR all turn guesses are used up
    if (game.isSoloMode) {
      const isCorrectPlayer = player.role === 'spymaster' && player.team === game.soloTeam;
      const noActiveClue = !game.currentClue;
      const turnGuessesFinished = (game.soloTurnGuessesRemaining || 0) === 0;
      
      console.log('🔍 [CLUE CHECK] Solo mode checks:', {
        isCorrectPlayer,
        noActiveClue,
        turnGuessesFinished,
        currentClue: game.currentClue,
        turnGuesses: game.soloTurnGuessesRemaining
      });
      
      return isCorrectPlayer && (noActiveClue || turnGuessesFinished);
    }
    
    // In classic mode, normal rules apply
    return player.role === 'spymaster' && 
           player.team === game.currentTurn && 
           !game.currentClue;
  }

  canPlayerRevealCard(game: CodenamesGame, player: GamePlayer | null): boolean {
    if (!player || game.status !== 'playing') {
      return false;
    }
    
    // In solo mode, check solo turn guesses and team
    if (game.isSoloMode) {
      return player.role === 'operative' && 
             player.team === game.soloTeam && 
             (game.soloTurnGuessesRemaining || 0) > 0;
    }
    
    // In classic mode, normal rules apply
    return player.role === 'operative' && 
           player.team === game.currentTurn && 
           game.guessesRemaining > 0;
  }
}

export const gameService = new GameService();
export default gameService;


============================================================
FILE: RAILWAY_DEPLOYMENT.md
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\RAILWAY_DEPLOYMENT.md
SIZE: 3424 characters
============================================================
# Railway Deployment Checklist for Codenames App

## 🚀 Pre-Deployment Steps

### 1. Railway Account Setup
- [ ] Create Railway account at railway.app
- [ ] Install Railway CLI: `npm install -g @railway/cli`
- [ ] Login: `railway login`

### 2. Project Setup
- [ ] Create new Railway project: `railway new`
- [ ] Link to this directory: `railway link`

### 3. Database Setup
- [ ] Add PostgreSQL service in Railway dashboard
- [ ] Copy DATABASE_URL from Railway to environment variables
- [ ] Verify Prisma schema matches your needs

### 4. Environment Variables (Railway Dashboard)
**Backend Service:**
- [ ] JWT_SECRET=your-super-secret-jwt-key-change-this
- [ ] NODE_ENV=production
- [ ] FRONTEND_URL=https://your-frontend-domain.railway.app
- [ ] DATABASE_URL (auto-provided by PostgreSQL service)

**Frontend Service:**
- [ ] VITE_API_URL=https://your-backend-domain.railway.app
- [ ] VITE_WS_URL=https://your-backend-domain.railway.app
- [ ] VITE_NODE_ENV=production

## 🔧 Deployment Steps

### 1. Backend Deployment
```bash
cd backend
railway deploy
```

### 2. Database Migration
```bash
railway run npx prisma migrate deploy
```

### 3. Frontend Deployment
```bash
cd frontend
railway deploy
```

### 4. Update Backend Code (if needed)
- [ ] Switch from in-memory Maps to Prisma database calls
- [ ] Update socket handlers to use database
- [ ] Test authentication with PostgreSQL

## 🧪 Testing Steps

### 1. Backend Testing
- [ ] Visit: https://your-backend-domain.railway.app/api/health
- [ ] Should show: {"status": "OK", "message": "..."}

### 2. Frontend Testing
- [ ] Visit: https://your-frontend-domain.railway.app
- [ ] Test user registration/login
- [ ] Create a game lobby
- [ ] Test real-time Socket.io connection

### 3. Full Integration Testing
- [ ] Multiple users join same lobby
- [ ] Real-time team assignment works
- [ ] Game creation and gameplay functions
- [ ] Mobile access works

## 🚨 Troubleshooting

### Common Issues:
1. **Database Connection**: Check DATABASE_URL in Railway dashboard
2. **CORS Errors**: Update FRONTEND_URL environment variable
3. **Socket.io Issues**: Verify WebSocket proxy settings
4. **Build Failures**: Check Node.js version (should be 18+)

### Useful Railway Commands:
```bash
railway logs         # View deployment logs  
railway shell        # Access deployed container
railway status       # Check service status
railway restart      # Restart services
```

## 📝 Post-Deployment

### 1. Performance Monitoring
- [ ] Set up Railway monitoring alerts
- [ ] Test app performance under load
- [ ] Monitor database connection limits

### 2. Domain Setup (Optional)
- [ ] Configure custom domain in Railway
- [ ] Update CORS settings for new domain
- [ ] Set up SSL certificate (auto-handled by Railway)

### 3. Scaling Considerations
- [ ] Monitor resource usage
- [ ] Consider upgrading Railway plan if needed
- [ ] Implement connection pooling for database

## 🎉 Success Criteria

✅ **Deployment Successful When:**
- Backend health check responds
- Frontend loads without errors
- Users can create accounts and login
- Real-time lobby functionality works
- Mobile devices can access the app
- Game creation and team assignment functions
- WebSocket connections are stable

---

**Estimated Deployment Time:** 30-60 minutes
**Railway Free Tier Limits:** $5/month credit, sufficient for testing
**Production Ready:** After successful testing and custom domain setup


================================================================================
END OF COMBINED FILES
================================================================================
