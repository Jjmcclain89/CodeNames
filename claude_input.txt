================================================================================
COMBINED FILES FOR CLAUDE IMPORT
Generated from 1 files
================================================================================

TABLE OF CONTENTS:
 1. frontend/src/components/GamesList/GamesList.tsx

================================================================================

============================================================
FILE: frontend/src/components/GamesList/GamesList.tsx
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\components\GamesList\GamesList.tsx
SIZE: 11005 characters
============================================================
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

interface GameLobbyListItem {
  code: string;
  id: string;
  status: string;
  playerCount: number;
  players: string[];
  ownerUsername: string;
  createdAt: string;
  lastActivity: string;
}

interface GamesListProps {
  className?: string;
}

const GamesList: React.FC<GamesListProps> = ({ className = '' }) => {
  // Games list state
  const [lobbyCode, setLobbyCode] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [isJoining, setIsJoining] = useState(false);
  const [error, setError] = useState('');
  const [gameLobbies, setGameLobbies] = useState<GameLobbyListItem[]>([]);
  const [isLoadingLobbies, setIsLoadingLobbies] = useState(false);
  const navigate = useNavigate();

  // Load game lobbies from backend
  const loadGameLobbiesList = async () => {
    try {
      setIsLoadingLobbies(true);
      setError('');
      const response = await fetch('/api/gameLobbies');
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success) {
        setGameLobbies(data.gameLobbies || []);
      } else {
        throw new Error(data.error || 'Failed to load game lobbies');
      }
    } catch (err) {
      console.error('❌ Error loading game lobbies:', err);
      setError(err instanceof Error ? err.message : 'Failed to load game lobbies');
      setGameLobbies([]);
    } finally {
      setIsLoadingLobbies(false);
    }
  };

  // Create a new game lobby
  const handleCreateGameLobby = async () => {
    try {
      setIsCreating(true);
      setError('');
      
      // Get user info from localStorage (assuming auth service stores it there)
      const userStr = localStorage.getItem('user');
      const user = userStr ? JSON.parse(userStr) : null;
      
      const response = await fetch('/api/gameLobbies/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: user?.id || 'anonymous',
          username: user?.username || 'Anonymous'
        }),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success) {
        navigate(`/lobby/${data.lobbyCode}`);
      } else {
        throw new Error(data.error || 'Failed to create game lobby');
      }
    } catch (err) {
      console.error('❌ Error creating game lobby:', err);
      setError(err instanceof Error ? err.message : 'Failed to create game lobby');
    } finally {
      setIsCreating(false);
    }
  };

  // Join game with code input
  const handleJoinGameLobby = async () => {
    if (!lobbyCode.trim()) return;
    
    try {
      setIsJoining(true);
      setError('');
      
      // Get user info from localStorage
      const userStr = localStorage.getItem('user');
      const user = userStr ? JSON.parse(userStr) : null;
      
      const response = await fetch('/api/gameLobbies/join', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          lobbyCode: lobbyCode.trim().toUpperCase(),
          userId: user?.id || 'anonymous',
          username: user?.username || 'Anonymous'
        }),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success) {
        navigate(`/lobby/${data.lobbyCode}`);
      } else {
        throw new Error(data.error || 'Failed to join game lobby');
      }
    } catch (err) {
      console.error('❌ Error joining game lobby:', err);
      setError(err instanceof Error ? err.message : 'Failed to join game lobby');
    } finally {
      setIsJoining(false);
    }
  };

  // Join game from lobby list
  const handleJoinGameFromList = (code: string) => {
    setLobbyCode(code);
    handleJoinGameLobby();
  };

  // Handle lobby code input change
  const handleLobbyCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.toUpperCase().slice(0, 6);
    setLobbyCode(value);
  };

  // Load game lobbies list on component mount and refresh periodically
  useEffect(() => {
    loadGameLobbiesList();
    
    // Refresh lobbies list every 10 seconds
    const interval = setInterval(loadGameLobbiesList, 10000);
    
    // Return cleanup function - NOT JSX!
    return () => clearInterval(interval);
  }, []);

  // Main component return - THIS is where the JSX goes!
  return (
    <div className={`${className}`}>
      <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-lg sm:rounded-2xl shadow-2xl border border-slate-600/50 p-3 sm:p-6 lg:p-8 backdrop-blur-lg max-h-[90vh] flex flex-col">

        {/* Error Display */}
        {error && (
          <div className="mb-6 p-4 bg-red-900/50 border border-red-500/50 rounded-lg">
            <p className="text-red-200">{error}</p>
          </div>
        )}

        {/* Create New Game Button */}
        <div className="mb-6">
          <button 
            onClick={handleCreateGameLobby}
            disabled={isCreating}
            className="w-full bg-gradient-to-r from-emerald-600 to-emerald-700 hover:from-emerald-700 hover:to-emerald-800 disabled:from-slate-600 disabled:to-slate-700 text-white py-3 px-6 rounded-lg font-semibold transition-all duration-200 shadow-lg hover:shadow-emerald-500/25 text-lg"
          >
            {isCreating ? (
              <span className="flex items-center justify-center">
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-3"></div>
                Creating Game...
              </span>
            ) : (
              <span className="flex items-center justify-center">
                <span className="text-xl mr-2">🎮</span>
                Create New Game
              </span>
            )}
          </button>
        </div>

        {/* Active Game Lobbies List */}
        <div className="mb-4 sm:mb-6 lg:mb-8 flex-1 flex flex-col min-h-0">
          <div className="flex justify-between items-center mb-3 sm:mb-4 lg:mb-6">
            <h3 className="text-lg sm:text-xl font-semibold text-slate-100">Active Game Lobbies</h3>
            <button 
              onClick={loadGameLobbiesList}
              disabled={isLoadingLobbies}
              className="text-blue-400 hover:text-blue-300 font-medium flex items-center space-x-2 transition-colors duration-200"
            >
              <span>{isLoadingLobbies ? '🔄' : '🔄'}</span>
            </button>
          </div>
          
          <div className="p-2 sm:p-4 lg:p-6 max-h-[400px] sm:max-h-[500px] overflow-y-auto scrollbar-thin scrollbar-thumb-slate-600 scrollbar-track-slate-800">
            {gameLobbies.length > 0 ? (
              <div className="grid gap-4">
                {gameLobbies.map((lobby) => (
                  <div key={lobby.code} className="border-2 border-slate-600 rounded-lg bg-slate-800/50 p-3 sm:p-4">
                    {/* Title Section */}
                    <div className="flex items-center justify-between mb-3">
                      {/* Left: User's Game */}
                      <h3 className="text-lg font-semibold text-slate-100">
                        {lobby.ownerUsername}'s Game
                      </h3>
                      
                      {/* Right: ID */}
                      <div className="text-sm text-slate-400 font-mono">
                        ID:{lobby.code}
                      </div>
                    </div>

                    {/* Players Info */}
                    <div className="text-sm text-slate-300 mb-2 text-left">
                      <span className="font-medium">Players:</span> {lobby.players.length > 0 ? lobby.players.join(', ') : 'None'}
                    </div>
                    
                    <hr className="border-slate-600 mb-4" />
                    
                    {/* Join Game Button */}
                    <div className="border-2 border-slate-600 rounded">
                      <button
                        onClick={() => handleJoinGameFromList(lobby.code)}
                        className="w-full py-2 px-4 text-slate-300 hover:bg-slate-700/50 transition-all duration-200 font-medium"
                      >
                        Join Game
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-20 text-slate-400">
                <div className="text-5xl mb-4">🎮</div>
                <p className="text-lg font-semibold text-slate-300">No active game lobbies</p>
                <p className="text-slate-400 mt-2">Create the first lobby to get started!</p>
              </div>
            )}
          </div>
        </div>

        {/* Join with Code */}
        <div>
          <div className="p-3 sm:p-4 lg:p-6 hover:bg-slate-700/10 transition-all duration-200 rounded-lg sm:rounded-xl">
            <h4 className="text-base sm:text-lg font-semibold text-slate-100 mb-3 sm:mb-4 flex items-center">
              <span className="text-xl mr-2">🚪</span>
              Join with Code
            </h4>
            <div className="space-y-3">
              <input
                type="text"
                value={lobbyCode}
                onChange={handleLobbyCodeChange}
                className="w-full px-3 py-2 bg-slate-700/60 border border-slate-500/50 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-slate-100 backdrop-blur-sm uppercase text-center font-mono placeholder-slate-400"
                placeholder="ABCD12"
                maxLength={6}
                disabled={isJoining}
              />
              <button 
                onClick={handleJoinGameLobby}
                disabled={isJoining || !lobbyCode.trim()}
                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 disabled:from-slate-600 disabled:to-slate-700 text-white py-2 px-4 rounded-lg font-semibold transition-all duration-200 shadow-lg hover:shadow-blue-500/25"
              >
                {isJoining ? (
                  <span className="flex items-center justify-center">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                    Joining...
                  </span>
                ) : (
                  'Join'
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GamesList;


================================================================================
END OF COMBINED FILES
================================================================================
