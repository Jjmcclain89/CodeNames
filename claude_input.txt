================================================================================
COMBINED FILES FOR CLAUDE IMPORT
Generated from 6 files
================================================================================

TABLE OF CONTENTS:
 1. frontend/src/components/GameLobby/GameLobby.tsx
 2. backend/src/index.ts
 3. backend/src/routes/games.ts
 4. frontend/src/pages/GamePage.tsx
 5. frontend/src/services/gameService.ts
 6. frontend/src/components/GameBoard/GameBoard.tsx

================================================================================

============================================================
FILE: frontend/src/components/GameLobby/GameLobby.tsx
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\components\GameLobby\GameLobby.tsx
SIZE: 12977 characters
============================================================
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

interface RoomListItem {
  code: string;
  id: string;
  status: string;
  playerCount: number;
  players: string[];
  createdAt: string;
  lastActivity: string;
}

interface GameLobbyProps {
  className?: string;
}

const GameLobby: React.FC<GameLobbyProps> = ({ className = '' }) => {
  // Game lobby state
  const [roomCode, setRoomCode] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [isJoining, setIsJoining] = useState(false);
  const [error, setError] = useState('');
  const [rooms, setRooms] = useState<RoomListItem[]>([]);
  const [isLoadingRooms, setIsLoadingRooms] = useState(false);
  const navigate = useNavigate();

  // Load games list on component mount and refresh periodically
  useEffect(() => {
    loadRoomsList();
    
    // Refresh rooms list every 10 seconds
    const interval = setInterval(loadRoomsList, 10000);
    
    return () => clearInterval(interval);
  }, []);

  const loadRoomsList = async () => {
    setIsLoadingRooms(true);
    try {
      console.log('📋 Loading rooms list...');
      const response = await fetch('/api/rooms');
      const data = await response.json();
      
      if (data.success) {
        setRooms(data.rooms || []);
        console.log(`✅ Loaded ${data.rooms?.length || 0} rooms`);
      } else {
        console.error('Failed to load rooms list:', data.error);
      }
    } catch (err) {
      console.error('Error loading rooms list:', err);
    }
    setIsLoadingRooms(false);
  };

  // Better error handling function
  const handleApiResponse = async (response: Response) => {
    const contentType = response.headers.get('content-type');
    
    if (!response.ok) {
      if (!contentType?.includes('application/json')) {
        const text = await response.text();
        throw new Error(`HTTP ${response.status}: Server returned HTML instead of JSON. Check if backend is running and proxy is configured.`);
      }
    }
    
    if (contentType?.includes('application/json')) {
      return await response.json();
    } else {
      const text = await response.text();
      throw new Error(`Expected JSON but got: ${contentType}. Response: ${text.substring(0, 100)}...`);
    }
  };

  const handleCreateRoom = async () => {
    setIsCreating(true);
    setError('');
    
    try {
      console.log('🎮 Creating game...');
      
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      
      const response = await fetch('/api/rooms/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          userId: user.id || `user_${Date.now()}`,
          username: user.username || 'Anonymous',
          debug: true 
        })
      });

      const data = await handleApiResponse(response);
      
      if (data.success && data.roomCode) {
        console.log('🎉 Navigating to room:', data.roomCode);
        // Refresh games list before navigating
        loadRoomsList();
        navigate(`/room/${data.roomCode}`);
      } else {
        setError(data.error || 'Failed to create game');
      }
    } catch (err: any) {
      console.error('💥 Error creating game:', err);
      setError(err.message);
    }
    
    setIsCreating(false);
  };

  const handleJoinRoom = async () => {
    if (!roomCode.trim()) {
      setError('Please enter a room code');
      return;
    }
    
    setIsJoining(true);
    setError('');

    try {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      
      const response = await fetch('/api/rooms/join', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          roomCode: roomCode.trim().toUpperCase(),
          userId: user.id || `user_${Date.now()}`,
          username: user.username || 'Anonymous'
        })
      });

      const data = await handleApiResponse(response);
      
      if (data.success && data.roomCode) {
        console.log('🎉 Navigating to room:', data.roomCode);
        navigate(`/room/${data.roomCode}`);
      } else {
        setError(data.error || 'Failed to join game');
      }
    } catch (err: any) {
      console.error('💥 Error joining game:', err);
      setError(err.message);
    }
    
    setIsJoining(false);
  };

  const handleJoinGameFromList = async (gameCode: string) => {
    try {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      
      const response = await fetch('/api/rooms/join', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          roomCode: gameCode,
          userId: user.id || `user_${Date.now()}`,
          username: user.username || 'Anonymous'
        })
      });

      const data = await handleApiResponse(response);
      
      if (data.success) {
        console.log('🎉 Navigating to room:', gameCode);
        console.log('🎮 [GAME_LOBBY] Navigating to room:', gameCode);
        navigate(`/room/${gameCode}`);
        console.log('🎮 [GAME_LOBBY] Navigation called');
      } else {
        setError(data.error || 'Failed to join game');
      }
    } catch (err: any) {
      console.error('💥 Error joining game from list:', err);
      setError(err.message);
    }
  };

  const handleRoomCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setRoomCode(e.target.value.toUpperCase());
    if (error) setError('');
  };

  const getTimeAgo = (timestamp: string) => {
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now.getTime() - time.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return 'just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours}h ago`;
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays}d ago`;
  };

  return (
    <div className={`${className}`}>
      <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-2xl shadow-2xl border border-slate-600/50 p-8 backdrop-blur-lg">

        {/* Error Display */}
        {error && (
          <div className="mb-6 p-4 bg-red-900/50 border border-red-500/50 rounded-lg">
            <p className="text-red-200">{error}</p>
          </div>
        )}

        {/* Active Rooms List - Main Focus */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-semibold text-slate-100 flex items-center">
              <span className="text-2xl mr-3">🎯</span>
              Active Rooms
            </h3>
            <button 
              onClick={loadRoomsList}
              disabled={isLoadingRooms}
              className="text-blue-400 hover:text-blue-300 font-medium flex items-center space-x-2 transition-colors duration-200"
            >
              <span>{isLoadingRooms ? '🔄 Loading...' : '🔄 Refresh'}</span>
            </button>
          </div>
          
          {/* Games List Container */}
          <div className="p-6 min-h-[300px]">
            {rooms.length > 0 ? (
              <div className="space-y-4">
                {rooms.map((room) => (
                  <div key={room.code} className="flex items-center justify-between p-4 hover:bg-slate-700/20 transition-all duration-200 rounded-lg group">
                    <div className="flex-1">
                      <div className="flex items-center space-x-6">
                        <div className="bg-gradient-to-r from-violet-600 to-indigo-600 text-white px-3 py-2 rounded-lg font-mono font-bold text-lg shadow-lg">
                          {room.code}
                        </div>
                        <div className="text-slate-300">
                          <div className="flex items-center space-x-4 mb-1">
                            <span className="font-semibold text-slate-200">{room.playerCount} player{room.playerCount !== 1 ? 's' : ''}</span>
                            <span className="text-sm text-slate-400">•</span>
                            <span className="text-sm">{getTimeAgo(room.lastActivity)}</span>
                            <span className="text-sm text-slate-400">•</span>
                            <span className="text-emerald-400 capitalize font-medium">{room.status}</span>
                          </div>
                          {room.players.length > 0 && (
                            <div className="text-sm text-slate-400">
                              <span className="font-medium">Players:</span> {room.players.join(', ')}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    <button
                      onClick={() => handleJoinGameFromList(room.code)}
                      className="bg-gradient-to-r from-emerald-600 to-emerald-700 hover:from-emerald-700 hover:to-emerald-800 text-white px-6 py-2 rounded-lg font-semibold transition-all duration-200 shadow-lg hover:shadow-emerald-500/25"
                    >
                      Join Room
                    </button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-20 text-slate-400">
                <div className="text-5xl mb-4">🎮</div>
                <p className="text-lg font-semibold text-slate-300">No active rooms</p>
                <p className="text-slate-400 mt-2">Create the first room to get started!</p>
              </div>
            )}
          </div>
        </div>

        {/* Quick Actions - Create & Join */}
        <div className="border-t border-slate-600/30 pt-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          
          {/* Join with Code - Left Side */}
          <div className="p-6 hover:bg-slate-700/10 transition-all duration-200 rounded-xl">
            <h4 className="text-lg font-semibold text-slate-100 mb-4 flex items-center">
              <span className="text-xl mr-2">🚪</span>
              Join with Code
            </h4>
            <div className="space-y-3">
              <input
                type="text"
                value={roomCode}
                onChange={handleRoomCodeChange}
                className="w-full px-3 py-2 bg-slate-700/60 border border-slate-500/50 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-slate-100 backdrop-blur-sm uppercase text-center font-mono placeholder-slate-400"
                placeholder="ABCD12"
                maxLength={6}
                disabled={isJoining}
              />
              <button 
                onClick={handleJoinRoom}
                disabled={isJoining || !roomCode.trim()}
                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 disabled:from-slate-600 disabled:to-slate-700 text-white py-2 px-4 rounded-lg font-semibold transition-all duration-200 shadow-lg hover:shadow-blue-500/25"
              >
                {isJoining ? (
                  <span className="flex items-center justify-center">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                    Joining...
                  </span>
                ) : (
                  'Join'
                )}
              </button>
            </div>
          </div>

          {/* Create New Room - Right Side */}
          <div className="p-6 hover:bg-slate-700/10 transition-all duration-200 rounded-xl">
            <h4 className="text-lg font-semibold text-slate-100 mb-4 flex items-center">
              <span className="text-xl mr-2">🎮</span>
              Create New Room
            </h4>
            <div className="text-center">
              <button 
                onClick={handleCreateRoom}
                disabled={isCreating}
                className="w-full bg-gradient-to-r from-emerald-600 to-emerald-700 hover:from-emerald-700 hover:to-emerald-800 disabled:from-slate-600 disabled:to-slate-700 text-white py-2 px-4 rounded-lg font-semibold transition-all duration-200 shadow-lg hover:shadow-emerald-500/25"
              >
                {isCreating ? (
                  <span className="flex items-center justify-center">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                    Creating...
                  </span>
                ) : (
                  'Create'
                )}
              </button>
            </div>
          </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GameLobby;


============================================================
FILE: backend/src/index.ts
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\backend\src\index.ts
SIZE: 29407 characters
============================================================
import express, { Request, Response, NextFunction } from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import dotenv from 'dotenv';
import { gameService } from './services/gameService';
import gameRoutes from './routes/games';
import roomRoutes from './routes/rooms';

// Load environment variables
dotenv.config();

console.log('🚀 Starting Codenames backend server...');

const app = express();
const server = createServer(app);

// CORS configuration for mobile access
const corsOptions = {
  origin: [
    "http://localhost:5173",
    process.env.FRONTEND_URL || "http://localhost:5173",
    // Allow any IP on local network for mobile testing
    /^http:\/\/192\.168\.\d{1,3}\.\d{1,3}:5173$/,
    /^http:\/\/10\.\d{1,3}\.\d{1,3}\.\d{1,3}:5173$/,
    /^http:\/\/172\.16\.\d{1,3}\.\d{1,3}:5173$/
  ],
  methods: ["GET", "POST"],
  credentials: true
};

app.use(cors(corsOptions));
app.use(express.json());

console.log('📦 Express middleware configured');

// Simple in-memory storage for Phase 1
const users = new Map<string, any>();
const rooms = new Map<string, any>();
const connectedUsers = new Map<string, any>();
const userRooms = new Map<string, string>(); // Track which room each user is in

// Debug function to log users
function logUsers() {
  console.log('👥 Current users in memory:', users.size);
  for (const [userId, userData] of users.entries()) {
    console.log(`   - ${userData.username} (${userId}) token: ${userData.token.substring(0, 20)}...`);
  }
}

// ========================================
// API ROUTES
// ========================================

// Health check endpoint
app.get('/api/health', (req: Request, res: Response): void => {
  console.log('🏥 Health check endpoint called');
  res.json({ 
    status: 'OK', 
    message: 'Codenames backend server is running',
    timestamp: new Date().toISOString(),
    connectedUsers: connectedUsers.size,
    activeRooms: rooms.size,
    totalUsers: users.size,
    endpoints: [
      'GET /api/health',
      'POST /api/auth/login', 
      'POST /api/auth/verify',
      'GET /api/games/test',
      'POST /api/games/create',
      'POST /api/games/join'
    ]
  });
});

// Games routes
app.use('/api/games', gameRoutes);
app.use('/api/rooms', roomRoutes);

// Auth routes
app.post('/api/auth/login', (req: Request, res: Response): void => {
  try {
    console.log('🔑 Login attempt:', req.body);
    
    const { username } = req.body;
    if (!username || username.trim().length === 0) {
      res.status(400).json({
        success: false,
        error: 'Username is required'
      });
      return;
    }
    
    // Create simple user for Phase 1
    const user = {
      id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      username: username.trim(),
      createdAt: new Date().toISOString()
    };
    
    // Simple token
    const token = `token_${user.id}_${Date.now()}`;
    
    // Store user
    users.set(user.id, { ...user, token });
    
    console.log('✅ Login successful for:', username, 'User ID:', user.id);
    console.log('🎫 Generated token:', token.substring(0, 30) + '...');
    
    // Log current users for debugging
    logUsers();
    
    res.json({
      success: true,
      token,
      user: {
        id: user.id,
        username: user.username
      }
    });
    
  } catch (error) {
    console.error('❌ Login error:', error);
    res.status(500).json({
      success: false,
      error: 'Login failed',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Token verification
app.post('/api/auth/verify', (req: Request, res: Response): void => {
  try {
    console.log('🔍 Token verification attempt');
    
    const { token } = req.body;
    if (!token) {
      res.status(400).json({
        success: false,
        error: 'Token is required'
      });
      return;
    }
    
    console.log('🔍 Verifying token:', token.substring(0, 30) + '...');
    
    // Find user by token
    let foundUser = null;
    for (const [userId, userData] of users.entries()) {
      if (userData.token === token) {
        foundUser = userData;
        break;
      }
    }
    
    if (!foundUser) {
      console.log('❌ Token not found in users map');
      logUsers();
      res.status(401).json({
        success: false,
        error: 'Invalid token'
      });
      return;
    }
    
    console.log('✅ Token verification successful for:', foundUser.username);
    
    res.json({
      success: true,
      user: {
        id: foundUser.id,
        username: foundUser.username
      }
    });
    
  } catch (error) {
    console.error('❌ Token verification error:', error);
    res.status(500).json({
      success: false,
      error: 'Token verification failed',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

console.log('🔗 API routes configured');

// ========================================
// SOCKET HANDLERS ORGANIZATION
// ========================================

import { GameService } from './services/gameService';

// ROOM PHASE: Team assignment and game setup
// - room:join-team (team assignment)
// - room:start-game (transition to game)
// - join-game-room (join room and game state)

// GAME PHASE: Actual Codenames gameplay  
// - game:give-clue, game:reveal-card, game:end-turn, etc.

// Add game socket handlers to existing socket connection
function addGameHandlers(socket: any, io: any) {
  const user = connectedUsers.get(socket.id);
  if (!user) {
    return;
  }

  // Game creation and management
  // ========================================
  // GAME PHASE HANDLERS  
  // ========================================
  
  socket.on('game:create', () => {
    try {
      // Get user's current room instead of hardcoded GLOBAL
      const currentRoom = userRooms.get(socket.id);
      if (!currentRoom) {
        socket.emit('game:error', 'Not in a game room');
        return;
      }
      const roomCode = currentRoom;
      
      // Join existing game or create new one (DON'T always create new)
      let game = gameService.getGameForRoom(roomCode);
      if (!game) {
        console.log('🎮 No existing game for room:', roomCode, '- creating new one');
        game = gameService.createGameForRoom(roomCode);
      } else {
        console.log('🎮 Found existing game for room:', roomCode, '- joining it');
      }
      
      // Add player to game
      console.log('🎮 Adding player to game:');
      console.log('🎮 Game ID:', game.getId());
      console.log('🎮 User:', user.username, 'ID:', user.id, 'Socket:', socket.id);
      const success = gameService.addPlayerToGame(game.getId(), user.id, user.username, socket.id);
      console.log('🎮 Add player result:', success);
      
      if (success) {
        const gameState = game.getGame();
        socket.emit('game:state-updated', gameState);
        socket.to(roomCode).emit('game:player-joined', gameState.players.find((p: any )=> p.id === user.id));
        console.log('🎮 Player', user.username, 'joined game in room:', roomCode);
      } else {
        socket.emit('game:error', 'Failed to join game');
      }
    } catch (error) {
      console.error('❌ Error joining/creating game:', error);
      socket.emit('game:error', 'Failed to join game');
    }
  });

  socket.on('game:start', () => {
    try {
      console.log('\n🚀 [GAME START] Attempting to start game for user:', user.username, 'ID:', user.id);
      
      // First check if user is in a game
      const existingGame = gameService.getGameByPlayer(user.id);
      console.log('🚀 [GAME START] User game lookup result:', !!existingGame);
      
      if (!existingGame) {
        console.log('❌ [GAME START] User not in any game - checking current room');
        const currentRoom = userRooms.get(socket.id);
        console.log('🚀 [GAME START] Current room:', currentRoom);
        
        if (currentRoom) {
          // Try to find/create game for current room
          let game = gameService.getGameForRoom(currentRoom);
          if (!game) {
            console.log('🚀 [GAME START] No game for room, creating one');
            game = gameService.createGameForRoom(currentRoom);
          }
          
          // Add user to game
          const addResult = gameService.addPlayerToGame(game.getId(), user.id, user.username, socket.id);
          console.log('🚀 [GAME START] Added user to game:', addResult);
        }
      }
      
      // Now try to start the game
      const result = gameService.startGame(user.id);
      console.log('🚀 [GAME START] Start game result:', result);
      
      if (result.success) {
        const game = gameService.getGameByPlayer(user.id);
        if (game) {
          const gameState = game.getGame();
          console.log('🚀 [GAME START] Broadcasting game state to room:', gameState.gameCode);
          console.log('🚀 [GAME START] Game status:', gameState.status);
          console.log('🚀 [GAME START] Players in game:', gameState.players.length);
          io.to(gameState.gameCode).emit('game:state-updated', gameState);
          console.log('✅ [GAME START] Game started successfully by:', user.username);
        }
      } else {
        console.log('❌ [GAME START] Failed to start game:', result.error);
        socket.emit('game:error', result.error || 'Failed to start game');
      }
    } catch (error) {
      console.error('❌ [GAME START] Exception during game start:', error);
      console.error('❌ [GAME START] Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
      socket.emit('game:error', 'Failed to start game: ' + (error instanceof Error ? error.message : String(error)));
    }
  });

  socket.on('game:give-clue', (data: { word: string; number: number }) => {
    try {
      const result = gameService.giveClue(user.id, data.word, data.number);
      
      if (result.success) {
        const game = gameService.getGameByPlayer(user.id);
        if (game) {
          const gameState = game.getGame();
          io.to(gameState.gameCode).emit('game:state-updated', gameState);
          if (gameState.currentClue) {
            io.to(gameState.gameCode).emit('game:clue-given', gameState.currentClue);
          }
          console.log('💡 Clue given by', user.username + ':', data.word, data.number);
        }
      } else {
        socket.emit('game:error', result.error || 'Failed to give clue');
      }
    } catch (error) {
      console.error('❌ Error giving clue:', error);
      socket.emit('game:error', 'Failed to give clue');
    }
  });

  socket.on('game:reveal-card', (cardId: string) => {
    try {
      const result = gameService.revealCard(user.id, cardId);
      
      if (result.success && result.card) {
        const game = gameService.getGameByPlayer(user.id);
        if (game) {
          const gameState = game.getGame();
          io.to(gameState.gameCode).emit('game:state-updated', gameState);
          io.to(gameState.gameCode).emit('game:card-revealed', result.card);
          
          if (result.gameEnded && result.winner) {
            io.to(gameState.gameCode).emit('game:game-ended', result.winner);
            console.log('🎉 Game ended! Winner:', result.winner);
          }
          
          console.log('🎯 Card revealed by', user.username + ':', result.card.word, '(' + result.card.team + ')');
        }
      } else {
        socket.emit('game:error', result.error || 'Failed to reveal card');
      }
    } catch (error) {
      console.error('❌ Error revealing card:', error);
      socket.emit('game:error', 'Failed to reveal card');
    }
  });

  socket.on('game:end-turn', () => {
    try {
      const result = gameService.endTurn(user.id);
      
      if (result.success) {
        const game = gameService.getGameByPlayer(user.id);
        if (game) {
          const gameState = game.getGame();
          io.to(gameState.gameCode).emit('game:state-updated', gameState);
          io.to(gameState.gameCode).emit('game:turn-changed', gameState.currentTurn);
          console.log('⏭️ Turn ended by', user.username, '- now', gameState.currentTurn, 'turn');
        }
      } else {
        socket.emit('game:error', result.error || 'Failed to end turn');
      }
    } catch (error) {
      console.error('❌ Error ending turn:', error);
      socket.emit('game:error', 'Failed to end turn');
    }
  });

  socket.on('game:reset', () => {
    try {
      const result = gameService.resetGame(user.id);
      
      if (result.success) {
        const game = gameService.getGameByPlayer(user.id);
        if (game) {
          const gameState = game.getGame();
          io.to(gameState.gameCode).emit('game:state-updated', gameState);
          console.log('🔄 Game reset by:', user.username);
        }
      } else {
        socket.emit('game:error', result.error || 'Failed to reset game');
      }
    } catch (error) {
      console.error('❌ Error resetting game:', error);
      socket.emit('game:error', 'Failed to reset game');
    }
  });
// Room socket handlers

socket.on('room:join-team', (data: { roomId: string; team: string; role: string }) => {
  const user = connectedUsers.get(socket.id);
  if (!user) {
    socket.emit('error', { message: 'Not authenticated' });
    return;
  }
  
  console.log(`👥 ${user.username} joining ${data.team} team as ${data.role} in room ${data.roomId}`);
  
  try {
    // Import rooms from routes/rooms.ts
    const { rooms } = require('./routes/rooms');
    
    // Get the room
    const room = rooms.get(data.roomId.toUpperCase());
    if (!room) {
      socket.emit('error', { message: 'Room not found' });
      return;
    }
    
    // Find and update the player in the room
    const playerIndex = room.players.findIndex((p: any) => p.id === user.id);
    if (playerIndex !== -1) {
      // Update existing player
      room.players[playerIndex].team = data.team;
      room.players[playerIndex].role = data.role;
    } else {
      // Add new player to room
      room.players.push({
        id: user.id,
        username: user.username,
        team: data.team,
        role: data.role,
        isOnline: true,
        isOwner: room.players.length === 0
      });
    }
    
    // Update room timestamp
    room.updatedAt = new Date().toISOString();
    
    console.log(`✅ ${user.username} successfully joined ${data.team} team as ${data.role}`);
    console.log(`📋 Room ${data.roomId} now has ${room.players.length} players`);
    
    // Send updated room state to the requesting user first
    socket.emit('room-updated', room);
    
    // Then broadcast to all other players in the room
    socket.to(data.roomId.toUpperCase()).emit('room-updated', room);
    
  } catch (error) {
    console.error('❌ Error updating room team assignment:', error);
    socket.emit('error', { message: 'Failed to join team' });
  }
});

socket.on('room:start-game', (data: { roomId: string }) => {
  const user = connectedUsers.get(socket.id);
  if (!user) {
    socket.emit('error', { message: 'Not authenticated' });
    return;
  }
  
  console.log(`🚀 ${user.username} starting game from room ${data.roomId}`);
  
  try {
    // Import rooms from routes/rooms.ts
    const { rooms } = require('./routes/rooms');
    
    // Get the room
    const room = rooms.get(data.roomId.toUpperCase());
    if (!room) {
      socket.emit('error', { message: 'Room not found' });
      return;
    }
    
    // Validate teams before starting
    const redPlayers = room.players.filter((p: any) => p.team === 'red');
    const bluePlayers = room.players.filter((p: any) => p.team === 'blue');
    
    if (redPlayers.length === 0 || bluePlayers.length === 0) {
      socket.emit('error', { message: 'Need players on both teams to start' });
      return;
    }
    
    // Create game using existing room code as game code
    const gameCode = data.roomId.toUpperCase();
    const game = gameService.createGameWithCode(gameCode, user.id);
    
    // Add all room players to the game
    room.players.forEach((player: any) => {
      if (player.team !== 'neutral') {
        gameService.addPlayerToGameByCode(gameCode, player.id, player.username, '');
        // Set their team assignment in the game
        gameService.assignPlayerToTeam(player.id, player.team as any, player.role as any);
      }
    });
    
    // Start the game
    const startResult = gameService.startGame(user.id);
    if (startResult.success) {
      // Update room status
      room.status = 'playing';
      room.updatedAt = new Date().toISOString();
      
      console.log(`✅ Game started successfully for room ${data.roomId}`);
      
      // Navigate all room members to the game
      io.to(data.roomId.toUpperCase()).emit('game-created', {
        gameId: gameCode,
        message: 'Game started! Redirecting to game board...'
      });
    } else {
      socket.emit('error', { message: startResult.error || 'Failed to start game' });
    }
    
  } catch (error) {
    console.error('❌ Error starting game from room:', error);
    socket.emit('error', { message: 'Failed to start game' });
  }
});

// Simple room joining for RoomPage
socket.on('join-room', (roomCode: string) => {
  const user = connectedUsers.get(socket.id);
  if (!user) {
    socket.emit('error', { message: 'Not authenticated' });
    return;
  }
  
  console.log(`🏠 User ${user.username} joining room: ${roomCode}`);
  
  // Leave any previous rooms (except GLOBAL)
  const socketRooms = Array.from(socket.rooms) as string[];
  socketRooms.forEach((room) => {
    if (room !== socket.id && room !== 'GLOBAL' && room.length === 6) {
      socket.leave(room);
    }
  });
  
  // Join the new room
  socket.join(roomCode.toUpperCase());
  userRooms.set(socket.id, roomCode.toUpperCase());
  
  // Notify others in room
  socket.to(roomCode.toUpperCase()).emit('player-joined-room', {
    player: { username: user.username, id: user.id },
    message: `${user.username} joined the room`
  });
  
  console.log(`✅ ${user.username} joined room ${roomCode.toUpperCase()}`);
});

  // Add the game state request handler properly
  socket.on('game:request-state', () => {
    try {
      console.log('🔍 Game state requested by:', user.username);
      const currentRoom = userRooms.get(socket.id);
      console.log('🔍 User is in room:', currentRoom);
      
      // Try to find existing game for user
      const game = gameService.getGameByPlayer(user.id);
      if (game) {
        const gameState = game.getGame();
        socket.emit('game:state-updated', gameState);
        console.log('📤 Sent existing game state to:', user.username);
      } else {
        console.log('❌ No existing game found for:', user.username);
        socket.emit('game:error', 'No active game found');
      }
    } catch (error) {
      console.error('❌ Error handling game state request:', error);
      socket.emit('game:error', 'Failed to get game state');
    }
  });
}

// ========================================
// SOCKET.IO SETUP WITH ENHANCED DEBUGGING
// ========================================

const io = new Server(server, {
  cors: corsOptions,
  transports: ['websocket', 'polling']
});

// Helper functions
function findUserByToken(token: string) {
  console.log('🔍 Looking for user with token:', token ? token.substring(0, 30) + '...' : 'null/undefined');
  
  if (!token) {
    console.log('❌ No token provided');
    return null;
  }
  
  for (const [userId, userData] of users.entries()) {
    if (userData.token === token) {
      console.log('✅ Found user:', userData.username, userId);
      return userData;
    }
  }
  
  console.log('❌ User not found for token');
  console.log('🔍 Available users:');
  logUsers();
  return null;
}

function createRoom() {
  const roomCode = Math.random().toString(36).substr(2, 6).toUpperCase();
  const room = {
    code: roomCode,
    users: new Map(),
    messages: [],
    createdAt: new Date().toISOString()
  };
  rooms.set(roomCode, room);
  return room;
}

function getOrCreateGlobalRoom() {
  if (!rooms.has('GLOBAL')) {
    const globalRoom = {
      code: 'GLOBAL',
      users: new Map(),
      messages: [],
      createdAt: new Date().toISOString()
    };
    rooms.set('GLOBAL', globalRoom);
  }
  return rooms.get('GLOBAL');
}

// Socket handlers
let authCounter = 0;

io.on('connection', (socket) => {
  console.log('📡 Socket connected:', socket.id);
  
  socket.on('authenticate', (token: string) => {
    authCounter++;
    console.log('🔐 Socket authentication attempt #' + authCounter + ' for socket:', socket.id);
    console.log('🔐 Total connected sockets:', io.engine.clientsCount);
    console.log('🔐 Total connectedUsers in memory:', connectedUsers.size);
    console.log('🔐 Received token type:', typeof token);
    console.log('🔐 Token value:', token ? token.substring(0, 30) + '...' : 'null/undefined');
    
    const user = findUserByToken(token);
    
    if (user) {
      // Store connected user
      connectedUsers.set(socket.id, {
        ...user,
        socketId: socket.id,
        connectedAt: new Date().toISOString()
      });
      
      // Join global room automatically for Phase 1
      const globalRoom = getOrCreateGlobalRoom();
      
            globalRoom.users.set(socket.id, user);
      socket.join('GLOBAL');
      
      socket.emit('authenticated', { 
        success: true, 
        user: user,
        roomCode: 'GLOBAL'
      });
      
      // Notify others in global room
      socket.to('GLOBAL').emit('user-joined', {
        user: user,
        message: `${user.username} joined the chat`
      });
      
      // Send current users in room
      const roomUsers = Array.from(globalRoom.users.values());
      io.to('GLOBAL').emit('room-users', { users: roomUsers });
      
      // Send recent messages
      socket.emit('recent-messages', { messages: globalRoom.messages.slice(-10) });
      addGameHandlers(socket, io);
      console.log('✅ Socket authenticated successfully for:', user.username, 'in GLOBAL room');
    } else {
      socket.emit('authenticated', { success: false, error: 'Invalid token' });
      console.log('❌ Socket authentication failed for socket:', socket.id);
    }
  });
  
  socket.on('send-message', (data) => {
    const user = connectedUsers.get(socket.id);
    if (!user) {
      console.log('❌ Message from unauthenticated socket:', socket.id);
      socket.emit('error', { message: 'Not authenticated' });
      return;
    }
    
    const message = {
      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,
      username: user.username,
      userId: user.id,
      text: data.message,
      timestamp: new Date().toISOString()
    };
    
    // Add to global room messages
    const globalRoom = getOrCreateGlobalRoom();
      
          globalRoom.messages.push(message);
    
    // Keep only last 50 messages
    if (globalRoom.messages.length > 50) {
      globalRoom.messages = globalRoom.messages.slice(-50);
    }
    
    // Broadcast to all users in global room
    io.to('GLOBAL').emit('new-message', message);
    
    console.log(`💬 Message from ${user.username}: ${data.message}`);
  });

  // ========================================
  // ROOM PHASE HANDLERS
  // ========================================
  
  // Join room and initialize game state (used by RoomPage and GamePage)
  socket.on('join-game-room', (gameCode: string) => {
    const user = connectedUsers.get(socket.id);
    if (!user) {
      socket.emit('error', { message: 'Not authenticated' });
      return;
    }
    
    console.log(`🎮 User ${user.username} joining game room: ${gameCode}`);
    
    // Track which room this user is in
    userRooms.set(socket.id, gameCode);
    
    // Leave any previous game rooms
    const socketRooms = Array.from(socket.rooms) as string[];
    socketRooms.forEach((room) => {
      if (room !== socket.id && room !== 'GLOBAL' && room.length === 6) {
        socket.leave(room);
        console.log(`📤 User ${user.username} left room: ${room}`);
      }
    });
    
    // Join the new game room
    socket.join(gameCode);
    
    // Get or create game using gameService
    let game = gameService.getGameByCode(gameCode);
    if (!game) {
      console.log(`🎮 Creating new game for room: ${gameCode}`);
      game = gameService.createGameWithCode(gameCode, user.id);
    }
    
    // Add player to game if not already present
    console.log('🎮 Adding player to game:');
    console.log('🎮 Game ID:', game.getId());
    console.log('🎮 User:', user.username, 'ID:', user.id, 'Socket:', socket.id);
    const success = gameService.addPlayerToGameByCode(gameCode, user.id, user.username, socket.id);
    console.log('🎮 Add player result:', success);
    
    if (success) {
      console.log(`✅ Added ${user.username} to game state`);
    } else {
      console.log(`ℹ️  ${user.username} already in game state`);
    }
    
    // Always send current game state to the player
    const gameState = game.getGame();
    console.log('🎮 BEFORE sending game state to:', user.username);
    console.log('🎮 Game players:', gameState.players.map((p: any) => `${p.username}(${p.team}/${p.role})`));
    socket.emit('game:state-updated', gameState);
    
    // Also send to others in the room
    console.log('🎮 Broadcasting game state to room:', gameCode);
    socket.to(gameCode).emit('game:state-updated', gameState);
    
    // Notify others that player joined
    socket.to(gameCode).emit('player-joined-room', {
      player: { username: user.username, id: user.id },
      message: `${user.username} joined the game`
    });
  });

  socket.on('send-room-message', (data: { gameCode: string; message: string }) => {
    const user = connectedUsers.get(socket.id);
    if (!user) {
      socket.emit('error', { message: 'Not authenticated' });
      return;
    }
    
    const { gameCode, message } = data;
    console.log(`💬 Room message from ${user.username} in ${gameCode}: ${message}`);
    
    const roomMessage = {
      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,
      username: user.username,
      userId: user.id,
      text: message,
      timestamp: new Date().toISOString()
    };
    
    // Broadcast to all users in the room (using socket rooms)
    io.to(gameCode).emit('new-room-message', roomMessage);
  });

  socket.on('disconnect', () => {
    const user = connectedUsers.get(socket.id);
    if (user) {
      console.log('📡 Socket disconnected:', socket.id, user.username);
      
      // Remove from global room
      const globalRoom = getOrCreateGlobalRoom();
      
      // Clean up room tracking
      userRooms.delete(socket.id);
      globalRoom.users.delete(socket.id);
      
      // Notify others
      socket.to('GLOBAL').emit('user-left', {
        user: user,
        message: `${user.username} left the chat`
      });
      
      // Update room users
      const roomUsers = Array.from(globalRoom.users.values());
      io.to('GLOBAL').emit('room-users', { users: roomUsers });
      
      // Clean up game state for Phase 2
      if (user) gameService.removePlayerFromAllGames(user.id);
      connectedUsers.delete(socket.id);
    } else {
      console.log('📡 Socket disconnected:', socket.id, '(unauthenticated)');
    }
  });
  
  // Handle connection without authentication (after 5 seconds, warn)
  setTimeout(() => {
    if (!connectedUsers.has(socket.id)) {
      console.log('⚠️ Socket', socket.id, 'connected but not authenticated after 5 seconds');
    }
  }, 5000);
});

console.log('📡 Socket.io with enhanced authentication debugging configured');

// ========================================
// ERROR HANDLING
// ========================================

// 404 handler for API routes
app.use('/api/*', (req: Request, res: Response): void => {
  console.log(`❌ API route not found: ${req.method} ${req.path}`);
  res.status(404).json({ 
    success: false, 
    error: 'API endpoint not found',
    path: req.path,
    method: req.method,
    availableEndpoints: [
      'GET /api/health',
      'POST /api/auth/login',
      'POST /api/auth/verify',
      'GET /api/games/test',
      'POST /api/games/create',
      'POST /api/games/join'
    ]
  });
});

// General error handler
app.use((err: any, req: Request, res: Response, next: NextFunction): void => {
  console.error('❌ Server error:', err);
  res.status(500).json({ 
    success: false, 
    error: 'Internal server error',
    message: err instanceof Error ? err.message : 'Unknown error'
  });
});

// ========================================
// START SERVER
// ========================================

const PORT = Number(process.env.PORT) || 3001;

server.listen(Number(PORT), '0.0.0.0', () => {
  console.log('');
  console.log('🎉 ================================');
  console.log(`🚀 Server running on port ${PORT}`);
  console.log(`📱 Mobile access: http://192.168.86.138:${PORT}`);
  console.log('📡 Socket.io with enhanced auth debugging');
  console.log(`🔗 API endpoints: http://localhost:${PORT}/api`);
  console.log(`🏥 Health check: http://localhost:${PORT}/api/health`);
  console.log(`🎮 Games API: http://localhost:${PORT}/api/games/test`);
  console.log('💬 Global chat room ready');
  console.log('🔍 Enhanced authentication logging enabled');
  console.log('🎉 ================================');
  console.log('');
});

export default app;


============================================================
FILE: backend/src/routes/games.ts
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\backend\src\routes\games.ts
SIZE: 5276 characters
============================================================
import express, { Request, Response } from 'express';
import { gameService } from '../services/gameService';

const router = express.Router();

// Test endpoint
router.get('/test', (req: Request, res: Response): void => {
  console.log('🧪 API test endpoint hit!');
  res.json({ 
    success: true, 
    message: 'Games API is working!',
    timestamp: new Date().toISOString()
  });
});

// List all active games - using gameService
router.get('/', (req: Request, res: Response): void => {
  try {
    console.log('📋 GET /api/games - Listing all games...');
    
    const stats = gameService.getStats();
    const activeGames = gameService.getAllActiveGames();
    
    console.log(`📤 Found ${stats.totalGames} active games`);
    
    res.json({
      success: true,
      games: activeGames, // Return actual active games
      total: stats.totalGames,
      stats: stats,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('❌ Error listing games:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to list games',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Get game info by code - using gameService
router.get('/:gameCode', (req: Request, res: Response): void => {
  try {
    const { gameCode } = req.params;
    console.log(`🔍 GET /api/games/${gameCode} - Getting game info...`);
    
    if (!gameCode) {
      res.status(400).json({ 
        success: false,
        error: 'Game code is required' 
      });
      return;
    }
    
    const game = gameService.getGameByCode(gameCode.toUpperCase());
    
    if (game) {
      const gameState = game.getGame();
      console.log(`📤 [GAMES API] Returning game ${gameCode}:`);
      console.log(`📤 [GAMES API]   Status: ${gameState.status}`);
      console.log(`📤 [GAMES API]   Players: ${gameState.players.length}`);
      console.log(`📤 [GAMES API]   Game ID: ${gameState.id}`);
      
      // Return full game state for GameBoard component
      const responseData = { 
        success: true, 
        game: {
          ...gameState,  // Include ALL game state data
          code: gameCode.toUpperCase(),  // Ensure code is uppercase
        },
        timestamp: new Date().toISOString()
      };
      
      console.log(`📤 [GAMES API] Full response:`, JSON.stringify(responseData, null, 2));
      res.json(responseData);
    } else {
      res.status(404).json({ 
        success: false,
        error: 'Game not found' 
      });
    }
    
  } catch (error) {
    console.error('❌ Error in /api/games/:gameCode:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to get game info',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Create a new game - using gameService
router.post('/create', (req: Request, res: Response): void => {
  try {
    console.log('🎮 POST /api/games/create - Creating new game...');
    
    const { userId, username } = req.body;
    
    // Generate game code using gameService
    const gameCode = gameService.generateGameCode();
    
    // Create game using gameService
    const game = gameService.createGameWithCode(gameCode, userId || 'anonymous');
    
    // Add creator if provided
    if (username && userId) {
      gameService.addPlayerToGameByCode(gameCode, userId, username, '');
    }
    
    console.log(`✅ Created game: ${gameCode}`);
    
    res.json({ 
      success: true, 
      gameCode: gameCode,
      message: 'Game created successfully!',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('❌ Error creating game:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to create game',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Join an existing game - using gameService
router.post('/join', (req: Request, res: Response): void => {
  try {
    const { gameCode, userId, username } = req.body;
    console.log(`🚪 User ${username} joining game: ${gameCode}`);
    
    if (!gameCode) {
      res.status(400).json({ 
        success: false,
        error: 'Game code is required' 
      });
      return;
    }
    
    const game = gameService.getGameByCode(gameCode.toUpperCase());
    
    if (!game) {
      res.status(404).json({ 
        success: false,
        error: 'Game not found' 
      });
      return;
    }
    
    // Add player to game using gameService
    if (username && userId) {
      const success = gameService.addPlayerToGameByCode(gameCode.toUpperCase(), userId, username, '');
      
      if (success) {
        console.log(`✅ Added ${username} to game ${gameCode}`);
      } else {
        console.log(`ℹ️ ${username} already in game ${gameCode}`);
      }
    }
    
    res.json({ 
      success: true, 
      gameCode: gameCode.toUpperCase(),
      message: 'Joined game successfully!',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('❌ Error joining game:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to join game',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

export default router;


============================================================
FILE: frontend/src/pages/GamePage.tsx
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\pages\GamePage.tsx
SIZE: 11179 characters
============================================================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { socketService } from '../services/socketService';
import { gameService } from '../services/gameService';
import GameBoard from '../components/GameBoard/GameBoard';

const GamePage: React.FC = () => {
  const { gameId } = useParams<{ gameId: string }>();
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [gameState, setGameState] = useState<any>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [currentUser, setCurrentUser] = useState<any>(null);

  useEffect(() => {
    if (!gameId) return;
    
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    setCurrentUser(user);
    loadGameAndConnect();
    
    return () => {
      gameService.removeAllGameListeners();
      if (socketService.socket) {
        socketService.socket.off('game:state-updated');
        socketService.socket.off('game:clue-given');
        socketService.socket.off('game:card-revealed');
        socketService.socket.off('game:turn-changed');
        socketService.socket.off('game:game-ended');
      }
    };
  }, [gameId]);

  const loadGameAndConnect = async () => {
    console.log('🔍 [GAMEPAGE DEBUG] Starting loadGameAndConnect for gameId:', gameId);
    
    if (!gameId) {
      console.log('❌ [GAMEPAGE DEBUG] No game ID provided');
      setError('No game ID provided');
      setIsLoading(false);
      return;
    }

    try {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      const token = localStorage.getItem('token');
      
      console.log('🔍 [GAMEPAGE DEBUG] User:', user.username, 'Token exists:', !!token);
      
      if (!user.username || !token) {
        console.log('❌ [GAMEPAGE DEBUG] Missing user or token');
        setError('Please log in first');
        setIsLoading(false);
        return;
      }

      // Load game state
      console.log('🔍 [GAMEPAGE DEBUG] Fetching game state from /api/games/' + gameId);
      const gameResponse = await fetch(`/api/games/${gameId}`);
      
      console.log('🔍 [GAMEPAGE DEBUG] Game response status:', gameResponse.status, 'OK:', gameResponse.ok);
      
      if (gameResponse.ok) {
        const gameData = await gameResponse.json();
        console.log('🔍 [GAMEPAGE DEBUG] Game data received:', JSON.stringify(gameData, null, 2));
        
        if (gameData.success) {
          console.log('🔍 [GAMEPAGE DEBUG] Game data success, setting game state');
          console.log('🔍 [GAMEPAGE DEBUG] Game status:', gameData.game?.status);
          console.log('🔍 [GAMEPAGE DEBUG] Game players:', gameData.game?.players?.length);
          
          setGameState(gameData.game);
          
          // Verify this is an active game (not waiting room)
          if (gameData.game.status === 'waiting' || gameData.game.status === 'setup') {
            console.log('⚠️ [GAMEPAGE DEBUG] Game not ready - status:', gameData.game.status);
            setError('Game has not started yet. Please wait in the room.');
            setIsLoading(false);
            return;
          }
          
          console.log('🔍 [GAMEPAGE DEBUG] Game is active, connecting to socket...');
          // Connect to game socket
          await connectToGame(gameId, token, user);
          console.log('✅ [GAMEPAGE DEBUG] Connected to game, setting loading false');
          setIsLoading(false);
        } else {
          console.log('❌ [GAMEPAGE DEBUG] Game data not successful:', gameData.error);
          throw new Error(gameData.error || 'Failed to load game');
        }
      } else if (gameResponse.status === 404) {
        console.log('❌ [GAMEPAGE DEBUG] Game not found (404)');
        setError('Game not found');
        setIsLoading(false);
        return;
      } else {
        console.log('❌ [GAMEPAGE DEBUG] Bad response status:', gameResponse.status);
        throw new Error('Failed to load game');
      }
      
    } catch (err: any) {
      console.error('❌ [GAMEPAGE DEBUG] Error loading game:', err);
      setError(err.message || 'Unable to connect to game');
      setIsLoading(false);
    }
  };

  const connectToGame = async (gameId: string, token: string, user: any) => {
    if (isConnected && socketService.socket?.connected) {
      return Promise.resolve();
    }
    
    return new Promise<void>((resolve) => {
      if (!socketService.socket?.connected) {
        console.log('❌ No socket connection available');
        return;
      }

      const handleAuth = () => {
        socketService.socket?.emit('join-game', gameId);
        setIsConnected(true);
        setupGameListeners();
        resolve();
      };

      socketService.onAuthenticated((data: any) => {
        if (data.success) handleAuth();
      });
      
      socketService.authenticate(token);
      
      if (socketService.socket?.connected && !isConnected) {
        handleAuth();
      }
    });
  };

  const setupGameListeners = () => {
    gameService.removeAllGameListeners();
    
    gameService.onGameStateUpdated((newGameState: any) => {
      console.log('🎮 Game state updated:', newGameState);
      setGameState(newGameState);
    });

    gameService.onGameError((error: string) => {
      console.error('🎮 Game error:', error);
      setError(error);
      setTimeout(() => setError(''), 3000);
    });
    
    if (socketService.socket) {
      socketService.socket.on('game:clue-given', (clue: any) => {
        console.log('💡 Clue given:', clue);
      });
      
      socketService.socket.on('game:card-revealed', (card: any) => {
        console.log('🎯 Card revealed:', card);
      });
      
      socketService.socket.on('game:turn-changed', (newTurn: string) => {
        console.log('⏭️ Turn changed:', newTurn);
      });
      
      socketService.socket.on('game:game-ended', (winner: string) => {
        console.log('🏆 Game ended, winner:', winner);
      });
    }
  };

  const getCurrentUserPlayer = () => {
    if (!gameState || !gameState.players) return null;
    
    return gameState.players.find((p: any) => 
      p.username === currentUser?.username || p.id === currentUser?.id
    );
  };

  // Loading State
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
        <div className="text-center bg-white p-8 rounded-2xl shadow-xl">
          <div className="text-2xl font-bold text-gray-900 mb-4">🎮 Loading Game...</div>
          <div className="text-gray-600 mb-6">Game: <span className="font-mono bg-gray-100 px-2 py-1 rounded">{gameId}</span></div>
          <div className="flex justify-center">
            <div className="w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
          </div>
        </div>
      </div>
    );
  }

  // Error State
  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
        <div className="text-center bg-white p-8 rounded-2xl shadow-xl max-w-md">
          <div className="text-red-600 text-2xl font-bold mb-4">🚨 Game Error</div>
          <div className="text-gray-600 mb-6">
            <p>Game: <span className="font-mono bg-gray-100 px-2 py-1 rounded font-bold">{gameId}</span></p>
            <p className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg text-sm">{error}</p>
          </div>
          <div className="space-y-3">
            <button 
              onClick={() => navigate('/')}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              🏠 Go Back to Home
            </button>
            <button 
              onClick={() => window.location.reload()}
              className="w-full bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              🔄 Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Debug current state before rendering
  console.log('🔍 [GAMEPAGE RENDER] Current state:');
  console.log('  - isLoading:', isLoading);
  console.log('  - error:', error);
  console.log('  - gameState:', gameState ? 'exists' : 'null');
  console.log('  - gameState.status:', gameState?.status);
  console.log('  - isConnected:', isConnected);

  // Main Game UI - Only show if game is active
  if (gameState && gameState.status === 'playing') {
    console.log('✅ [GAMEPAGE RENDER] Rendering GameBoard');
    return (
      <GameBoard 
        gameState={gameState} 
        currentPlayer={getCurrentUserPlayer()}
        onCardClick={(cardId) => {
          if (!isConnected) {
            setError('Not connected to server');
            return;
          }
          socketService.socket?.emit('game:reveal-card', cardId);
        }}
        onGiveClue={(word, number) => {
          if (!isConnected) {
            setError('Not connected to server');
            return;
          }
          if (!word.trim()) {
            setError('Please enter a clue word');
            return;
          }
          if (number < 1 || number > 9) {
            setError('Number must be between 1 and 9');
            return;
          }
          socketService.socket?.emit('game:give-clue', { word: word.trim(), number });
        }}
        onEndTurn={() => {
          if (!isConnected) {
            setError('Not connected to server');
            return;
          }
          socketService.socket?.emit('game:end-turn');
        }}
        onStartGame={() => {
          // No longer needed - games start from room
        }}
        onJoinTeam={() => {
          // No longer needed - team assignment happens in room
        }}
      />
    );
  }

  // Fallback if game state is invalid
  console.log('⚠️ [GAMEPAGE RENDER] Rendering fallback - Invalid Game State');
  console.log('⚠️ [GAMEPAGE RENDER] Game State:', gameState);
  console.log('⚠️ [GAMEPAGE RENDER] Game Status:', gameState?.status);
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
      <div className="text-center bg-white p-8 rounded-2xl shadow-xl max-w-md">
        <div className="text-yellow-600 text-2xl font-bold mb-4">⚠️ Invalid Game State</div>
        <div className="text-gray-600 mb-6">
          <p>This game is not ready for play.</p>
          <p className="text-sm mt-2">Game Status: {gameState?.status || 'Unknown'}</p>
          <p className="text-xs mt-2 font-mono bg-gray-100 p-2 rounded">
            Debug: isLoading={isLoading ? 'true' : 'false'}, 
            error="{error}", 
            gameState={gameState ? 'exists' : 'null'}
          </p>
        </div>
        <button 
          onClick={() => navigate('/')}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
        >
          🏠 Go Back to Home
        </button>
      </div>
    </div>
  );
};

export default GamePage;


============================================================
FILE: frontend/src/services/gameService.ts
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\services\gameService.ts
SIZE: 4534 characters
============================================================
// Frontend Game Service - Extends existing socketService for game functionality
import { socketService } from './socketService';
import { CodenamesGame, GamePlayer, TeamColor, PlayerRole, GameClue, CodeCard } from '../types/game';

class GameService {
  // Game management
  createGame(): void {
    socketService.socket?.emit('game:create');
  }

  startGame(): void {
    console.log('🚀 [GAMESERVICE] Emitting game:start event to backend');
    socketService.socket?.emit('game:start');
    console.log('🚀 [GAMESERVICE] game:start event emitted');
  }

  resetGame(): void {
    socketService.socket?.emit('game:reset');
  }

  // Team and role management
  joinTeam(team: TeamColor, role: PlayerRole): void {
    if (team === 'neutral' || team === 'assassin') {
      console.error('Cannot join neutral or assassin team');
      return;
    }
    socketService.socket?.emit('game:join-team', team, role);
  }

  // Game actions
  giveClue(word: string, number: number): void {
    if (!word.trim() || number < 1 || number > 9) {
      console.error('Invalid clue parameters');
      return;
    }
    
    socketService.socket?.emit('game:give-clue', { 
      word: word.trim().toUpperCase(), 
      number 
    });
  }

  revealCard(cardId: string): void {
    socketService.socket?.emit('game:reveal-card', cardId);
  }

  endTurn(): void {
    socketService.socket?.emit('game:end-turn');
  }

  // Event listeners for game events
  onGameStateUpdated(callback: (game: CodenamesGame) => void): void {
    console.log('🎮 [GAMESERVICE] Registering game:state-updated listener');
    
    const wrappedCallback = (game: CodenamesGame) => {
      console.log('🎮 [GAMESERVICE] game:state-updated event received:', game);
      console.log('🎮 [GAMESERVICE] Game status in event:', game.status);
      console.log('🎮 [GAMESERVICE] Game players count:', game.players?.length);
      callback(game);
    };
    
    socketService.socket?.on('game:state-updated', wrappedCallback);
  }

  onPlayerJoined(callback: (player: GamePlayer) => void): void {
    socketService.socket?.on('game:player-joined', callback);
  }

  onCardRevealed(callback: (card: CodeCard) => void): void {
    socketService.socket?.on('game:card-revealed', callback);
  }

  onClueGiven(callback: (clue: GameClue) => void): void {
    socketService.socket?.on('game:clue-given', callback);
  }

  onTurnChanged(callback: (newTurn: TeamColor) => void): void {
    socketService.socket?.on('game:turn-changed', callback);
  }

  onGameEnded(callback: (winner: TeamColor) => void): void {
    socketService.socket?.on('game:game-ended', callback);
  }

  onGameError(callback: (error: string) => void): void {
    socketService.socket?.on('game:error', callback);
  }

  // Cleanup method
  removeAllGameListeners(): void {
    socketService.socket?.off('game:state-updated');
    socketService.socket?.off('game:player-joined');
    socketService.socket?.off('game:card-revealed');
    socketService.socket?.off('game:clue-given');
    socketService.socket?.off('game:turn-changed');
    socketService.socket?.off('game:game-ended');
    socketService.socket?.off('game:error');
  }

  // Utility methods
  getTeamStats(game: CodenamesGame) {
    const redCards = game.board.filter(c => c.team === 'red');
    const blueCards = game.board.filter(c => c.team === 'blue');
    const redRevealed = redCards.filter(c => c.isRevealed).length;
    const blueRevealed = blueCards.filter(c => c.isRevealed).length;

    return {
      red: { 
        total: redCards.length, 
        revealed: redRevealed, 
        remaining: redCards.length - redRevealed 
      },
      blue: { 
        total: blueCards.length, 
        revealed: blueRevealed, 
        remaining: blueCards.length - blueRevealed 
      }
    };
  }

  isPlayerTurn(game: CodenamesGame, player: GamePlayer | null): boolean {
    return !!(player && player.team === game.currentTurn);
  }

  canPlayerGiveClue(game: CodenamesGame, player: GamePlayer | null): boolean {
    return !!(
      player && 
      player.role === 'spymaster' && 
      player.team === game.currentTurn && 
      !game.currentClue && 
      game.status === 'playing'
    );
  }

  canPlayerRevealCard(game: CodenamesGame, player: GamePlayer | null): boolean {
    return !!(
      player && 
      player.role === 'operative' && 
      player.team === game.currentTurn && 
      game.guessesRemaining > 0 && 
      game.status === 'playing'
    );
  }
}

export const gameService = new GameService();
export default gameService;


============================================================
FILE: frontend/src/components/GameBoard/GameBoard.tsx
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\components\GameBoard\GameBoard.tsx
SIZE: 26024 characters
============================================================
import React, { useState, useEffect } from 'react';
import { CodenamesGame, GamePlayer, TeamColor, PlayerRole } from '../../types/game';
import Card from './Card';
import { gameService } from '../../services/gameService';

interface GameBoardProps {
  gameState: CodenamesGame;
  currentPlayer: GamePlayer | null;
  onCardClick: (cardId: string) => void;
  onGiveClue: (word: string, number: number) => void;
  onEndTurn: () => void;
  onStartGame: () => void;
  onJoinTeam: (team: TeamColor, role: PlayerRole) => void;
}

export const GameBoard: React.FC<GameBoardProps> = ({
  gameState,
  currentPlayer,
  onCardClick,
  onGiveClue,
  onEndTurn,
  onStartGame,
  onJoinTeam
}) => {
  const [clueWord, setClueWord] = useState('');
  const [clueNumber, setClueNumber] = useState(1);
  const [chatVisible, setChatVisible] = useState(false);
  const [playersVisible, setPlayersVisible] = useState(false);
  const [infoVisible, setInfoVisible] = useState(false);
  const [settingsVisible, setSettingsVisible] = useState(false);

  // Reset clue input when turn changes or clue is given
  useEffect(() => {
    if (gameState.currentClue) {
      setClueWord('');
      setClueNumber(1);
    }
  }, [gameState.currentClue]);

  const stats = gameService.getTeamStats(gameState);
  const isSpymaster = currentPlayer?.role === 'spymaster';
  const isMyTurn = gameService.isPlayerTurn(gameState, currentPlayer);
  const canGiveClue = gameService.canPlayerGiveClue(gameState, currentPlayer);
  const canRevealCard = gameService.canPlayerRevealCard(gameState, currentPlayer);

  const handleGiveClue = () => {
    if (clueWord.trim() && clueNumber >= 1 && clueNumber <= 9) {
      onGiveClue(clueWord.trim(), clueNumber);
    }
  };

  const getPlayersByTeam = (team: TeamColor) => {
    return gameState.players.filter(p => p.team === team);
  };

  const hasSpymaster = (team: TeamColor) => {
    return gameState.players.some(p => p.team === team && p.role === 'spymaster');
  };

  // Get board glow effect based on current turn - ENHANCED for visibility
  const getBoardGlowEffect = () => {
    if (gameState.currentTurn === 'red') {
      return 'shadow-2xl shadow-red-400 ring-4 ring-red-400/80 shadow-red-500/70 drop-shadow-2xl';
    } else {
      return 'shadow-2xl shadow-blue-400 ring-4 ring-blue-400/80 shadow-blue-500/70 drop-shadow-2xl';
    }
  };

  if (gameState.status === 'waiting') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900 p-4 relative">
        {/* Background Pattern */}
        <div className="absolute inset-0 opacity-10">
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,_var(--tw-gradient-stops))] from-blue-400 via-transparent to-transparent"></div>
          <div className="absolute inset-0 bg-[linear-gradient(45deg,_transparent_25%,_rgba(255,255,255,0.02)_25%,_rgba(255,255,255,0.02)_50%,_transparent_50%,_transparent_75%,_rgba(255,255,255,0.02)_75%)] bg-[length:60px_60px]"></div>
        </div>
        
        <div className="flex flex-col items-center justify-center min-h-screen">
          <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-xl shadow-2xl border border-slate-600/50 p-8 max-w-4xl w-full backdrop-blur-lg relative z-10">
            {/* Banner removed for cleaner look */}
            
            {/* Current Player Status */}
            {currentPlayer && (
              <div className="text-center mb-6 p-4 bg-slate-700/50 rounded-lg border border-slate-600/50">
                <p className="text-lg text-slate-200">
                  Welcome, <span className="font-semibold text-amber-200">{currentPlayer.username}</span>!
                </p>
                {currentPlayer.team !== 'neutral' && (
                  <p className="text-sm text-slate-300">
                    You are on the{' '}
                    <span className={`font-semibold ${currentPlayer.team === 'red' ? 'text-red-400' : 'text-blue-400'}`}>
                      {currentPlayer.team}
                    </span>{' '}
                    team as a <span className="font-semibold">{currentPlayer.role}</span>
                  </p>
                )}
              </div>
            )}
            
            {/* Team Selection */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              {/* Red Team */}
              <div className="bg-gradient-to-br from-red-900/60 to-red-800/40 border-2 border-red-500/50 rounded-lg p-6 backdrop-blur-sm">
                <h3 className="text-2xl font-semibold text-red-200 mb-4 text-center">
                  🔴 Red Team
                </h3>
                <div className="space-y-3 mb-4">
                  <button
                    onClick={() => onJoinTeam('red', 'spymaster')}
                    className="w-full bg-red-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-red-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                    disabled={hasSpymaster('red')}
                  >
                    {hasSpymaster('red') ? '👑 Spymaster Taken' : '👑 Join as Spymaster'}
                  </button>
                  <button
                    onClick={() => onJoinTeam('red', 'operative')}
                    className="w-full bg-red-400 text-white px-4 py-3 rounded-lg font-semibold hover:bg-red-500 transition-colors"
                  >
                    🕵️ Join as Operative
                  </button>
                </div>
                <div className="text-sm text-slate-300">
                  <div className="font-medium mb-2">Team Members:</div>
                  {getPlayersByTeam('red').length === 0 ? (
                    <p className="text-slate-400 italic">No players yet</p>
                  ) : (
                    getPlayersByTeam('red').map(player => (
                      <div key={player.id} className="flex justify-between items-center py-1">
                        <span>{player.username}</span>
                        <span className="text-red-400 font-medium">
                          {player.role === 'spymaster' ? '👑' : '🕵️'} {player.role}
                        </span>
                      </div>
                    ))
                  )}
                </div>
              </div>

              {/* Blue Team */}
              <div className="bg-gradient-to-br from-blue-900/60 to-blue-800/40 border-2 border-blue-500/50 rounded-lg p-6 backdrop-blur-sm">
                <h3 className="text-2xl font-semibold text-blue-200 mb-4 text-center">
                  🔵 Blue Team
                </h3>
                <div className="space-y-3 mb-4">
                  <button
                    onClick={() => onJoinTeam('blue', 'spymaster')}
                    className="w-full bg-blue-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-blue-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                    disabled={hasSpymaster('blue')}
                  >
                    {hasSpymaster('blue') ? '👑 Spymaster Taken' : '👑 Join as Spymaster'}
                  </button>
                  <button
                    onClick={() => onJoinTeam('blue', 'operative')}
                    className="w-full bg-blue-400 text-white px-4 py-3 rounded-lg font-semibold hover:bg-blue-500 transition-colors"
                  >
                    🕵️ Join as Operative
                  </button>
                </div>
                <div className="text-sm text-slate-300">
                  <div className="font-medium mb-2">Team Members:</div>
                  {getPlayersByTeam('blue').length === 0 ? (
                    <p className="text-slate-400 italic">No players yet</p>
                  ) : (
                    getPlayersByTeam('blue').map(player => (
                      <div key={player.id} className="flex justify-between items-center py-1">
                        <span>{player.username}</span>
                        <span className="text-blue-400 font-medium">
                          {player.role === 'spymaster' ? '👑' : '🕵️'} {player.role}
                        </span>
                      </div>
                    ))
                  )}
                </div>
              </div>
            </div>

            {/* Start Game Button */}
            <div className="text-center">
              <button
                onClick={onStartGame}
                className="bg-gradient-to-r from-emerald-600 to-emerald-700 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:from-emerald-700 hover:to-emerald-800 transition-all duration-200 disabled:from-slate-600 disabled:to-slate-700 disabled:cursor-not-allowed shadow-lg"
                disabled={gameState.players.length === 0}
              >
                🚀 Start Game
              </button>
              <p className="text-sm text-slate-400 mt-3">
                Need players on both teams to start
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900 overflow-hidden relative">
      {/* Background Pattern */}
      <div className="absolute inset-0 opacity-10">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,_var(--tw-gradient-stops))] from-blue-400 via-transparent to-transparent"></div>
        <div className="absolute inset-0 bg-[linear-gradient(45deg,_transparent_25%,_rgba(255,255,255,0.02)_25%,_rgba(255,255,255,0.02)_50%,_transparent_50%,_transparent_75%,_rgba(255,255,255,0.02)_75%)] bg-[length:60px_60px]"></div>
      </div>

      {/* Centered Layout Container */}
      <div className="min-h-screen flex justify-center p-4">
        <div className="flex flex-col items-center space-y-4 max-w-4xl w-full">
          
          {/* Icons positioned above the game board */}
          <div className="flex mb-2">
            <div className="flex space-x-2">
              <button
                onClick={() => setChatVisible(!chatVisible)}
                className={`w-10 h-10 rounded-lg shadow-lg border transition-all duration-200 flex items-center justify-center text-sm backdrop-blur-sm ${
                  chatVisible 
                    ? 'bg-gradient-to-br from-emerald-600 to-emerald-700 text-white border-emerald-400/50' 
                    : 'bg-gradient-to-br from-slate-700/80 to-slate-800/80 text-slate-200 border-slate-500/50 hover:from-slate-600/80 hover:to-slate-700/80'
                }`}
                title="Chat"
              >
                💬
              </button>
              <button
                onClick={() => setPlayersVisible(!playersVisible)}
                className={`w-10 h-10 rounded-lg shadow-lg border transition-all duration-200 flex items-center justify-center text-sm backdrop-blur-sm ${
                  playersVisible 
                    ? 'bg-gradient-to-br from-blue-600 to-blue-700 text-white border-blue-400/50' 
                    : 'bg-gradient-to-br from-slate-700/80 to-slate-800/80 text-slate-200 border-slate-500/50 hover:from-slate-600/80 hover:to-slate-700/80'
                }`}
                title="Players"
              >
                👥
              </button>
              <button
                onClick={() => setInfoVisible(!infoVisible)}
                className={`w-10 h-10 rounded-lg shadow-lg border transition-all duration-200 flex items-center justify-center text-sm backdrop-blur-sm ${
                  infoVisible 
                    ? 'bg-gradient-to-br from-amber-600 to-amber-700 text-white border-amber-400/50' 
                    : 'bg-gradient-to-br from-slate-700/80 to-slate-800/80 text-slate-200 border-slate-500/50 hover:from-slate-600/80 hover:to-slate-700/80'
                }`}
                title="Info"
              >
                ℹ️
              </button>
              <button
                onClick={() => setSettingsVisible(!settingsVisible)}
                className="w-10 h-10 bg-gradient-to-br from-slate-700/80 to-slate-800/80 rounded-lg shadow-lg border border-slate-600/50 flex items-center justify-center hover:from-slate-600/80 hover:to-slate-700/80 transition-all duration-200 backdrop-blur-sm relative"
                title="Settings"
              >
                <span className="text-slate-200 text-sm">⚙️</span>
                
                {/* Settings Dropdown */}
                {settingsVisible && (
                  <div className="absolute top-12 right-0 bg-gradient-to-br from-slate-800/95 to-slate-900/95 rounded-lg shadow-2xl border border-slate-600/50 p-3 min-w-32 backdrop-blur-lg z-60">
                    <button
                      onClick={() => window.location.href = '/'}
                      className="w-full bg-slate-700 hover:bg-slate-600 text-slate-200 px-3 py-2 rounded-lg text-sm font-medium transition-colors text-left"
                    >
                      🏠 Logout
                    </button>
                  </div>
                )}
              </button>
            </div>
          </div>
          
          {/* Current Clue Display */}
          {gameState.currentClue && (
            <div className="px-6 py-3 bg-gradient-to-r from-violet-900/90 to-indigo-900/90 border border-violet-500/50 rounded-xl shadow-xl backdrop-blur-lg">
              <span className="text-lg font-bold text-violet-100 drop-shadow-lg">
                💡 {gameState.currentClue.word} ({gameState.currentClue.number})
              </span>
              {gameState.guessesRemaining > 0 && (
                <span className="ml-3 text-sm text-violet-300">
                  {gameState.guessesRemaining} left
                </span>
              )}
            </div>
          )}

          {/* THE MAIN 5x5 GAME BOARD with Turn-Based Glow Effect */}
          <div className={`relative bg-gradient-to-br from-slate-800/90 via-slate-700/70 to-slate-800/90 rounded-2xl p-6 transition-all duration-700 ${getBoardGlowEffect()} border-2 border-slate-600/50 backdrop-blur-lg`}>
            {/* Board Game Texture with Turn Indicator */}
            <div className="absolute inset-0 rounded-2xl bg-[radial-gradient(circle_at_30%_20%,_rgba(139,69,19,0.1)_0%,_transparent_50%)] pointer-events-none"></div>
            <div className="absolute inset-0 rounded-2xl bg-[linear-gradient(45deg,_transparent_30%,_rgba(160,82,45,0.05)_30%,_rgba(160,82,45,0.05)_70%,_transparent_70%)] bg-[length:20px_20px] pointer-events-none"></div>
            {/* Turn Indicator Overlay */}
            <div className={`absolute inset-0 rounded-2xl pointer-events-none transition-all duration-700 ${
              gameState.currentTurn === 'red' 
                ? 'bg-gradient-to-br from-red-500/10 via-transparent to-red-500/5' 
                : 'bg-gradient-to-br from-blue-500/10 via-transparent to-blue-500/5'
            }`}></div>
            <div className="relative z-10">
              <div className="grid grid-cols-5 gap-3">
                {gameState.board && Array.isArray(gameState.board) ? gameState.board
                  .sort((a, b) => a.position - b.position)
                  .map((card) => (
                    <Card
                      key={card.id}
                      card={card}
                      isSpymaster={isSpymaster}
                      onClick={canRevealCard ? onCardClick : undefined}
                      disabled={!canRevealCard}
                    />
                  )) : (
                    <div className="text-center text-white">
                      <div className="text-xl mb-2">⚠️ Board not loaded</div>
                      <div className="text-sm opacity-75">Game board data is missing</div>
                    </div>
                  )}
              </div>
            </div>
          </div>

          {/* Controls Below Board */}
          {canGiveClue && (
            <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-xl shadow-xl p-4 w-full max-w-2xl backdrop-blur-lg border border-slate-600/50">
              <div className="flex items-end space-x-3">
                <div className="flex-1">
                  <input
                    type="text"
                    value={clueWord}
                    onChange={(e) => setClueWord(e.target.value)}
                    className="w-full px-3 py-2 bg-slate-700/50 border border-slate-500 rounded-lg focus:outline-none focus:ring-2 focus:ring-violet-400 text-slate-100 placeholder-slate-400"
                    placeholder="Clue word..."
                    required
                  />
                </div>
                <input
                  type="number"
                  min="1"
                  max="9"
                  value={clueNumber}
                  onChange={(e) => setClueNumber(parseInt(e.target.value) || 1)}
                  className="w-16 px-3 py-2 bg-slate-700/50 border border-slate-500 rounded-lg focus:outline-none focus:ring-2 focus:ring-violet-400 text-slate-100 text-center"
                />
                <button
                  onClick={handleGiveClue}
                  className="bg-gradient-to-r from-emerald-600 to-emerald-700 text-white px-6 py-2 rounded-lg hover:from-emerald-700 hover:to-emerald-800 transition-all duration-200 font-semibold shadow-lg"
                >
                  Give Clue
                </button>
              </div>
            </div>
          )}

          {canRevealCard && (
            <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-xl shadow-xl p-4 text-center backdrop-blur-lg border border-slate-600/50">
              <p className="text-slate-200 mb-3">
                🎯 Click a card to guess ({gameState.guessesRemaining} left)
              </p>
              <button
                onClick={onEndTurn}
                className="bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-2 rounded-lg hover:from-orange-600 hover:to-orange-700 transition-colors font-semibold shadow-lg"
              >
                ⏭️ End Turn
              </button>
            </div>
          )}

          {!isMyTurn && currentPlayer && currentPlayer.team !== 'neutral' && (
            <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-xl p-4 text-center max-w-md backdrop-blur-lg border border-slate-600/50">
              <p className="text-slate-300">
                ⏳ Waiting for {gameState.currentTurn === 'red' ? '🔴' : '🔵'} team...
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Side Panels */}
      {playersVisible && (
        <div className="fixed right-4 top-20 bottom-4 w-72 bg-gradient-to-br from-slate-800/95 to-slate-900/95 rounded-xl shadow-2xl border border-slate-600/50 p-4 z-40 flex flex-col backdrop-blur-xl">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-semibold text-slate-100">👥 Players ({gameState.players.length})</h3>
            <button 
              onClick={() => setPlayersVisible(false)}
              className="text-slate-400 hover:text-slate-200 transition-colors"
            >
              ✕
            </button>
          </div>
          <div className="space-y-2 overflow-y-auto">
            {gameState.players.map((player) => (
              <div key={player.id} className="flex items-center justify-between p-2 bg-slate-700/50 rounded-lg">
                <div>
                  <div className="font-medium text-slate-100">{player.username}</div>
                  <div className={`text-xs ${player.team === 'red' ? 'text-red-400' : 'text-blue-400'}`}>
                    {player.team === 'red' ? '🔴' : '🔵'} {player.role === 'spymaster' ? '👑' : '🕵️'}
                  </div>
                </div>
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              </div>
            ))}
          </div>
        </div>
      )}

      {chatVisible && (
        <div className="fixed right-4 top-20 bottom-4 w-72 bg-gradient-to-br from-slate-800/95 to-slate-900/95 rounded-xl shadow-2xl border border-slate-600/50 p-4 z-40 flex flex-col backdrop-blur-xl">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-semibold text-slate-100">💬 Chat</h3>
            <button 
              onClick={() => setChatVisible(false)}
              className="text-slate-400 hover:text-slate-200 transition-colors"
            >
              ✕
            </button>
          </div>
          
          <div className="flex-1 overflow-y-auto border border-slate-600 rounded-lg p-3 mb-4 bg-slate-700/30">
            <div className="space-y-2 text-sm">
              <div className="text-slate-400 text-center py-4">
                Chat functionality can be integrated here
              </div>
            </div>
          </div>

          <div className="flex space-x-2">
            <input
              type="text"
              placeholder="Type a message..."
              className="flex-1 px-3 py-2 bg-slate-700/50 border border-slate-500 rounded-lg focus:outline-none focus:ring-2 focus:ring-violet-400 text-slate-100 placeholder-slate-400 text-sm"
            />
            <button className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200">
              Send
            </button>
          </div>
        </div>
      )}

      {infoVisible && (
        <div className="fixed right-4 top-20 w-72 bg-gradient-to-br from-slate-800/95 to-slate-900/95 rounded-xl shadow-2xl border border-slate-600/50 p-4 z-40 backdrop-blur-xl">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-semibold text-amber-200">ℹ️ Game Info</h3>
            <button 
              onClick={() => setInfoVisible(false)}
              className="text-slate-400 hover:text-slate-200 transition-colors"
            >
              ✕
            </button>
          </div>
          <div className="space-y-3 text-sm">
            <div>
              <span className="text-slate-400">Game Code:</span>
              <span className="ml-2 font-mono text-amber-300">{gameState.gameCode || 'DEMO'}</span>
            </div>
            <div>
              <span className="text-slate-400">Status:</span>
              <span className="ml-2 text-emerald-400">{gameState.status}</span>
            </div>
            <div>
              <span className="text-slate-400">Current Turn:</span>
              <span className={`ml-2 ${gameState.currentTurn === 'red' ? 'text-red-400' : 'text-blue-400'}`}>
                {gameState.currentTurn === 'red' ? '🔴' : '🔵'} {gameState.currentTurn}
              </span>
            </div>
            <div className="pt-2 border-t border-slate-600">
              <div className="text-amber-200 font-medium mb-2">Team Scores:</div>
              <div className="flex justify-between items-center">
                <span className="text-red-400">🔴 Red:</span>
                <span className="text-red-300 font-medium">{stats.red.remaining} left</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-blue-400">🔵 Blue:</span>
                <span className="text-blue-300 font-medium">{stats.blue.remaining} left</span>
              </div>
            </div>
            {currentPlayer && (
              <div className="pt-2 border-t border-slate-600">
                <div className="text-amber-200 font-medium mb-2">Your Info:</div>
                <div>
                  <span className="text-slate-400">Name:</span>
                  <span className="ml-2 text-amber-300">{currentPlayer.username}</span>
                </div>
                <div>
                  <span className="text-slate-400">Team:</span>
                  <span className={`ml-2 ${currentPlayer.team === 'red' ? 'text-red-400' : 'text-blue-400'}`}>
                    {currentPlayer.team}
                  </span>
                </div>
                <div>
                  <span className="text-slate-400">Role:</span>
                  <span className="ml-2 text-slate-300">{currentPlayer.role}</span>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Game Over Modal */}
      {gameState.status === 'finished' && gameState.winner && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-gradient-to-br from-slate-800 to-slate-900 rounded-xl p-8 max-w-md w-full mx-4 shadow-2xl border border-slate-600">
            <h2 className="text-4xl font-bold text-center mb-4 text-amber-100">🎉 Game Over! 🎉</h2>
            <div className={`text-3xl font-bold text-center mb-6 ${gameState.winner === 'red' ? 'text-red-400' : 'text-blue-400'}`}>
              {gameState.winner === 'red' ? '🔴' : '🔵'} {gameState.winner.charAt(0).toUpperCase() + gameState.winner.slice(1)} Team Wins!
            </div>
            <div className="flex gap-4">
              <button
                onClick={() => window.location.reload()}
                className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-3 rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-semibold"
              >
                🔄 New Game
              </button>
              <button
                onClick={() => gameService.resetGame()}
                className="flex-1 bg-gradient-to-r from-emerald-600 to-emerald-700 text-white px-6 py-3 rounded-lg hover:from-emerald-700 hover:to-emerald-800 transition-all duration-200 font-semibold"
              >
                🎮 Play Again
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GameBoard;


================================================================================
END OF COMBINED FILES
================================================================================
