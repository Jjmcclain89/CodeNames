================================================================================
COMBINED FILES FOR CLAUDE IMPORT
Generated from 2 files
================================================================================

TABLE OF CONTENTS:
 1. frontend/src/App.tsx
 2. frontend/src/pages/GamePage.tsx

================================================================================

============================================================
FILE: frontend/src/App.tsx
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\App.tsx
SIZE: 4489 characters
============================================================
import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import LoginPage from './pages/LoginPage';
import HomePage from './pages/HomePage';
import GamePage from './pages/GamePage';
import DebugPage from './pages/DebugPage';
import GameDebugPage from './pages/GameDebugPage';
import authService from './services/authService';
import socketService from './services/socketService';
import './App.css';

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<any>(null);

  useEffect(() => {
    console.log('üîç APP DEBUG: useEffect triggered');
    console.log('üîç APP DEBUG: Timestamp:', Date.now());
    
    const initAuth = async () => {
      const token = authService.getToken();
      const savedUser = authService.getUser();
      console.log('üîç APP DEBUG: Token exists:', !!token);
      console.log('üîç APP DEBUG: Saved user exists:', !!savedUser);
      
      if (token && savedUser) {
        // Verify token is still valid
        const result = await authService.verifyToken(token);
        console.log('üîç APP DEBUG: Token verification result:', result.success);
        
        if (result.success) {
          setIsAuthenticated(true);
          setUser(savedUser);
          // Initialize socket connection with token
          console.log('üîå App.tsx: Initializing socket connection for user:', savedUser.username);
          
          socketService.connect();
          socketService.authenticate(token);
        } else {
          authService.logout();
        }
      }
      setIsLoading(false);
    };
    
    initAuth();
  }, []);

  const handleLogin = (userData: any, token: string) => {
    console.log('üîç LOGIN DEBUG: handleLogin called for user:', userData.username);
    
    setIsAuthenticated(true);
    setUser(userData);
    // Connect to socket after successful login
    console.log('üîå App.tsx: Connecting socket after login for:', userData.username);
    socketService.connect();
    socketService.authenticate(token);
  };

  const handleLogout = () => {
    authService.logout();
    socketService.disconnect();
    setIsAuthenticated(false);
    setUser(null);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-xl">Loading...</div>
      </div>
    );
  }

  return (
    <Router>
      <div className="App min-h-screen bg-gray-50">
        <header className="bg-blue-600 text-white p-4 shadow-lg">
          <div className="container mx-auto flex justify-between items-center">
            <h1 className="text-2xl font-bold">Codenames</h1>
            {isAuthenticated && (
              <div className="flex items-center space-x-4">
                <span>Welcome, {user?.username}!</span>
                <button
                  onClick={handleLogout}
                  className="bg-blue-700 hover:bg-blue-800 px-4 py-2 rounded text-sm"
                >
                  Logout
                </button>
              </div>
            )}
          </div>
        </header>
        
        <main className="container mx-auto p-4">
          <Routes>
            {/* Login Route */}
            <Route
              path="/login"
              element={
                !isAuthenticated ? (
                  <LoginPage onLogin={handleLogin} />
                ) : (
                  <Navigate to="/" replace />
                )
              }
            />
            
            {/* Home Route */}
            <Route
              path="/"
              element={
                isAuthenticated ? (
                  <HomePage />
                ) : (
                  <Navigate to="/login" replace />
                )
              }
            />
            
            {/* Game Route - Direct from homepage */}
            <Route
              path="/game/:gameCode"
              element={
                isAuthenticated ? (
                  <GamePage />
                ) : (
                  <Navigate to="/login" replace />
                )
              }
            />
            
            {/* Debug Routes */}
            <Route path="/debug-game" element={<GameDebugPage />} />
            <Route path="/debug" element={<DebugPage />} />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

export default App;


============================================================
FILE: frontend/src/pages/GamePage.tsx
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\pages\GamePage.tsx
SIZE: 30269 characters
============================================================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { socketService } from '../services/socketService';
import { gameService } from '../services/gameService';
import GameBoard from '../components/GameBoard/GameBoard';

interface Player {
  id: string;
  username: string;
  team?: string;
  role?: string;
  isOnline?: boolean;
}

interface GameMessage {
  id: string;
  username: string;
  userId: string;
  text: string;
  timestamp: string;
}

const GamePage: React.FC = () => {
  const { gameCode } = useParams<{ gameCode: string }>();
  const navigate = useNavigate();
  const [connectionInitiated, setConnectionInitiated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [gameState, setGameState] = useState<any>(null);
  const [messages, setMessages] = useState<GameMessage[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [teamActionInProgress, setTeamActionInProgress] = useState(false);
  const [reconnectionStatus, setReconnectionStatus] = useState<string | null>(null);

  useEffect(() => {
    if (!gameCode || connectionInitiated) {
      console.log('üîç Skipping connection - already initiated or no game code');
      return;
    }
    
    console.log('üîå Starting connection process for game:', gameCode);
    setConnectionInitiated(true);
    
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    setCurrentUser(user);
    loadGameAndConnect();
    
    // Cleanup on unmount
    return () => {
      console.log('üßπ Cleaning up connections');
      gameService.removeAllGameListeners();
      if (socketService.socket) {
        socketService.socket.off('player-joined-game');
        socketService.socket.off('new-game-message');
      }
      setConnectionInitiated(false);
    };
  }, [gameCode]);


  // ‚úÖ Auto-rejoin team if we got disconnected and lost team assignment
  const checkAndAutoRejoinTeam = (gameState: any) => {
    if (!gameState || !gameCode) return;
    
    const currentPlayer = getCurrentUserPlayer();
    const storedAssignment = localStorage.getItem('lastTeamAssignment');
    
    if (storedAssignment) {
      try {
        const assignment = JSON.parse(storedAssignment);
        const isForThisGame = assignment.gameCode === gameCode.toUpperCase();
        const isRecent = (Date.now() - assignment.timestamp) < 30 * 60 * 1000; // 30 minutes
        
        if (isForThisGame && isRecent) {
          // Check if we're missing from our team or assigned as neutral
          const shouldBeOnTeam = assignment.team;
          const shouldBeRole = assignment.role;
          
          if (!currentPlayer || currentPlayer.team === 'neutral' || currentPlayer.team !== shouldBeOnTeam) {
            console.log('üîÑ Detected team assignment loss - auto-rejoining...');
            console.log('üîÑ Should be:', shouldBeOnTeam, shouldBeRole);
            console.log('üîÑ Currently:', currentPlayer?.team || 'not found', currentPlayer?.role || 'not found');
            
            // Auto-rejoin the team
            setTimeout(() => {
              console.log('üîÑ Auto-rejoining team:', shouldBeOnTeam, shouldBeRole);
              handleJoinTeam(shouldBeOnTeam, shouldBeRole);
            }, 1000);
          }
        }
      } catch (e) {
        console.error('Error parsing stored team assignment:', e);
      }
    }
  };

  const loadGameAndConnect = async () => {
    console.log('üè† [GAMEPAGE] loadGameAndConnect called for game:', gameCode);
    
    if (!gameCode) {
      console.log('‚ùå [GAMEPAGE] No game code provided');
      setError('No game code provided');
      setIsLoading(false);
      return;
    }

    try {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      const token = localStorage.getItem('token');
      
      if (!user.username || !token) {
        setError('Please log in first');
        setIsLoading(false);
        return;
      }

      // STEP 1: Try to load existing game first (CORRECT APPROACH)
      console.log('üè† [GAMEPAGE] Attempting to load existing game:', gameCode.toUpperCase());
      const gameInfoResponse = await fetch(`/api/games/${gameCode.toUpperCase()}`);
      
      if (gameInfoResponse.ok) {
        // Game exists - load it
        const gameData = await gameInfoResponse.json();
        console.log('üè† [GAMEPAGE] Game exists - loading:', gameData);
        
        if (gameData.success) {
          // Check if user is already in the game
          const isUserInGame = gameData.game.players.some((p: any) => p.id === user.id);
          
          if (!isUserInGame) {
            // User not in game - try to join it
            console.log('üè† [GAMEPAGE] User not in game - attempting to join');
            const joinResponse = await fetch('/api/games/join', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ 
                gameCode: gameCode.toUpperCase(),
                userId: user.id,
                username: user.username
              })
            });

            if (!joinResponse.ok) {
              const joinData = await joinResponse.json();
              throw new Error(joinData.error || 'Failed to join game');
            }
            
            console.log('‚úÖ [GAMEPAGE] Successfully joined existing game');
          } else {
            console.log('‚úÖ [GAMEPAGE] User already in game - proceeding');
          }
          
          // Connect to socket and set up game
          await connectToGame(gameCode, token, user);
          console.log('‚úÖ [GAMEPAGE] Game loaded and connected successfully');
          
        } else {
          throw new Error(gameData.error || 'Failed to load game information');
        }
        
      } else if (gameInfoResponse.status === 404) {
        // Game doesn't exist
        setError('Game not found - the game code may be invalid or expired');
        setIsLoading(false);
        return;
        
      } else {
        // Other error loading game
        throw new Error('Failed to load game information');
      }
      
    } catch (err: any) {
      console.error('‚ùå [GAMEPAGE] Error loading game:', err);
      setError(err.message || 'Unable to connect to game server');
      setIsLoading(false);
      return;
    }
    
    setIsLoading(false);
  };

  const connectToGame = async (gameCode: string, token: string, user: any) => {
    console.log('üîå Connecting to game socket...', gameCode);
    
    if (isConnected && socketService.socket?.connected) {
      console.log('üîç Already connected to socket, skipping connection');
      return Promise.resolve();
    }
    
    return new Promise<void>((resolve) => {
      if (!socketService.socket?.connected) {
        console.log('‚ùå No socket connection available');
        return;
      }

      const handleAuth = () => {
        console.log('‚úÖ [GAMEPAGE] Socket authenticated, joining game:', gameCode);
        socketService.socket?.emit('join-game-room', gameCode);
        setIsConnected(true);
        
        setupGameListeners(user);
        resolve();
      };

      if (socketService.socket?.connected) {
        socketService.onAuthenticated((data: any) => {
          if (data.success) {
            handleAuth();
          }
        });
        
        socketService.authenticate(token);
        
        if (socketService.socket?.connected && !isConnected) {
          handleAuth();
        }
      }

      // Listen for game events
      socketService.socket?.on('player-joined-game', (data: any) => {
        console.log('üë• Player joined game:', data);
      });

      socketService.socket?.on('new-game-message', (message: GameMessage) => {
        console.log('üí¨ New game message:', message);
        setMessages(prev => [...prev, message]);
      });
    });
  };

  const setupGameListeners = (user: any) => {
    console.log('üéÆ Setting up game listeners for:', user.username);
    
    gameService.removeAllGameListeners();
    
    gameService.onGameStateUpdated((newGameState: any) => {
      console.log('üéÆ [GAMEPAGE] Game state updated:', newGameState);
      setGameState(newGameState);
      setIsLoading(false);
      
      // ‚úÖ Auto-rejoin temporarily disabled
      // checkAndAutoRejoinTeam(newGameState);
    });

    gameService.onGameError((error: string) => {
      console.error('üéÆ Game error:', error);
      setError(error);
      setTimeout(() => setError(''), 3000);
    });
    
    // ‚úÖ Add specific game action listeners
    if (socketService.socket) {
      // Listen for clue given events
      socketService.socket.on('game:clue-given', (clue: any) => {
        console.log('üí° Clue given event received:', clue);
        // Game state should update automatically, but we can show a toast
      });
      
      // Listen for card revealed events
      socketService.socket.on('game:card-revealed', (card: any) => {
        console.log('üéØ Card revealed event received:', card);
        // Game state should update automatically
      });
      
      // Listen for turn changed events
      socketService.socket.on('game:turn-changed', (newTurn: string) => {
        console.log('‚è≠Ô∏è Turn changed event received:', newTurn);
        // Game state should update automatically
      });
      
      // Listen for game ended events
      socketService.socket.on('game:game-ended', (winner: string) => {
        console.log('üèÜ Game ended event received, winner:', winner);
        // Could show a victory modal here
      });
    }
  };

  const sendMessage = () => {
    if (!newMessage.trim() || !isConnected || !gameCode) return;

    console.log('üì§ Sending game message:', newMessage);
    socketService.socket?.emit('send-game-message', {
      gameCode: gameCode.toUpperCase(),
      message: newMessage.trim()
    });

    setNewMessage('');
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  // ‚úÖ Simple, reliable team join function
  const handleJoinTeam = (team: string, role: string) => {
    console.log(`üë• Attempting to join ${team} team as ${role}`);
    
    // Basic checks
    if (teamActionInProgress) {
      console.log('‚è≥ Team action already in progress');
      return;
    }
    
    setTeamActionInProgress(true);
    setError('');
    
    try {
      // Store team assignment for potential recovery
      const teamAssignment = { team, role, gameCode: gameCode?.toUpperCase(), timestamp: Date.now() };
      localStorage.setItem('lastTeamAssignment', JSON.stringify(teamAssignment));
      console.log('üíæ Stored team assignment:', teamAssignment);
      
      // Simple socket check and emit
      if (socketService && socketService.socket) {
        if (!socketService.socket.connected) {
          console.log('üîå Socket not connected, trying to connect...');
          const token = localStorage.getItem('token');
          if (token) {
            socketService.connect();
            socketService.authenticate(token);
          }
        }
        
        // Emit the event regardless - let the backend handle it
        console.log('üì° Emitting game:join-team event');
        socketService.socket.emit('game:join-team', team, role);
        
      } else {
        throw new Error('Socket service not available');
      }
      
    } catch (error) {
      console.error('‚ùå Error in team join:', error);
      setError('Failed to join team - please refresh page');
    }
    
    // Reset action flag after a short delay
    const timeoutId = setTimeout(() => {
      setTeamActionInProgress(false);
      clearTimeout(timeoutId);
    }, 2000);
  };


  const handleStartGame = () => {
    console.log('üöÄ Starting Codenames game...');
    if (!isConnected) {
      setError('Not connected to server');
      return;
    }
    gameService.startGame();
  };

  const canStartGame = () => {
    if (!gameState || !gameState.players) return false;
    
    const redPlayers = gameState.players.filter((p: any) => p.team === 'red');
    const bluePlayers = gameState.players.filter((p: any) => p.team === 'blue');
    
    return redPlayers.length > 0 && bluePlayers.length > 0;
  };

  const getCurrentUserPlayer = () => {
    if (!gameState || !gameState.players) return null;
    
    // ‚úÖ Enhanced player matching with debug logging
    console.log('üîç Finding current user player...');
    console.log('üîç Current user:', currentUser);
    console.log('üîç Game players:', gameState.players.map(p => ({ id: p.id, username: p.username })));
    
    // Try multiple matching strategies
    let player = null;
    
    // Strategy 1: Match by username (original)
    player = gameState.players.find((p: any) => p.username === currentUser?.username);
    if (player) {
      console.log('‚úÖ Found player by username:', player.username);
      return player;
    }
    
    // Strategy 2: Match by user ID
    player = gameState.players.find((p: any) => p.id === currentUser?.id);
    if (player) {
      console.log('‚úÖ Found player by user ID:', player.username);
      return player;
    }
    
    // Strategy 3: Check if there's only one real player (not test players)
    const realPlayers = gameState.players.filter((p: any) => !p.id.startsWith('test_'));
    if (realPlayers.length === 1) {
      console.log('‚úÖ Found single real player:', realPlayers[0].username);
      return realPlayers[0];
    }
    
    console.log('‚ùå No matching player found');
    return null;
  };

  const getTeamPlayers = (team: string) => {
    if (!gameState || !gameState.players) return [];
    return gameState.players.filter((p: any) => p.team === team);
  };

  const hasSpymaster = (team: string) => {
    const teamPlayers = getTeamPlayers(team);
    return teamPlayers.some((p: any) => p.role === 'spymaster');
  };

  // Loading State
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
        <div className="text-center bg-white p-8 rounded-2xl shadow-xl">
          <div className="text-2xl font-bold text-gray-900 mb-4">üïµÔ∏è Loading Codenames Game...</div>
          <div className="text-gray-600 mb-6">Game Code: <span className="font-mono bg-gray-100 px-2 py-1 rounded">{gameCode}</span></div>
          <div className="flex justify-center">
            <div className="w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
          </div>
        </div>
      </div>
    );
  }

  // Error State
  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
        <div className="text-center bg-white p-8 rounded-2xl shadow-xl max-w-md">
          <div className="text-red-600 text-2xl font-bold mb-4">üö® Game Error</div>
          <div className="text-gray-600 mb-6">
            <p>Game Code: <span className="font-mono bg-gray-100 px-2 py-1 rounded font-bold">{gameCode}</span></p>
            <p className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg text-sm">{error}</p>
          </div>
          <div className="space-y-3">
            <button 
              onClick={() => navigate('/')}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              üè† Go Back to Home
            </button>
            <button 
              onClick={() => window.location.reload()}
              className="w-full bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              üîÑ Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Show team assignment if game is waiting or in setup
  if (!gameState || gameState.status === 'waiting' || gameState.status === 'setup') {
    const userPlayer = getCurrentUserPlayer();

    return (
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-6xl mx-auto p-6">
          <div className="mb-6 flex justify-between items-center">
            <button 
              onClick={() => navigate('/')}
              className="text-blue-600 hover:text-blue-800 flex items-center"
            >
              ‚Üê Back to Home
            </button>
            <div className="flex items-center space-x-4 text-sm">
              <div className="text-gray-600">
                Status: <span className={`font-semibold ${isConnected ? 'text-green-600' : 'text-yellow-600'}`}>
                  {isConnected ? 'Connected' : 'Connecting...'}
                </span>
              </div>
              <div className="text-gray-600">
                Players: <span className="font-semibold text-blue-600">{gameState?.players?.length || 0}</span>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Main Game Setup Area */}
            <div className="lg:col-span-2 space-y-6">
              <div className="bg-white rounded-lg shadow border border-gray-200 p-6">
                <h1 className="text-3xl font-bold text-gray-900 mb-6">
                  Codenames Game: {gameCode}
                </h1>
                
                {/* Team Assignment Section */}
                <div className="space-y-6">
                  <div className="text-center">
                    <h2 className="text-2xl font-semibold text-gray-900 mb-2">üïµÔ∏è Choose Your Team</h2>
                    <p className="text-gray-600">Select your team and role to get ready for the game!</p>
                  </div>

                  {/* Current User Status */}
                  {userPlayer && (
                    <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg">
                      <p className="text-center text-blue-900">
                        You are: <span className="font-semibold">{userPlayer.username}</span>
                        {userPlayer.team && userPlayer.team !== 'neutral' && (
                          <span className={`ml-2 font-bold ${userPlayer.team === 'red' ? 'text-red-600' : 'text-blue-600'}`}>
                            ‚Ä¢ {userPlayer.team === 'red' ? 'üî¥' : 'üîµ'} {userPlayer.team} team 
                            ({userPlayer.role === 'spymaster' ? 'üëë Spymaster' : 'üïµÔ∏è Operative'})
                          </span>
                        )}
                      </p>
                    </div>
                  )}

                  {/* Team Selection Grid */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Red Team */}
                    <div className="bg-red-50 border-2 border-red-200 rounded-lg p-6">
                      <h3 className="text-2xl font-semibold text-red-700 mb-4 text-center">
                        üî¥ Red Team
                      </h3>
                      <div className="space-y-3 mb-4">
                        <button
                          onClick={() => handleJoinTeam('red', 'spymaster')}
                          className="w-full bg-red-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-red-600 transition-colors disabled:bg-gray-400"
                          disabled={hasSpymaster('red')}
                        >
                          {hasSpymaster('red') ? 'üëë Spymaster Taken' : 'üëë Join as Spymaster'}
                        </button>
                        <button
                          onClick={() => handleJoinTeam('red', 'operative')}
                          className="w-full bg-red-400 text-white px-4 py-3 rounded-lg font-semibold hover:bg-red-500 transition-colors"
                        >
                          üïµÔ∏è Join as Operative
                        </button>
                      </div>
                      <div className="text-sm text-gray-700">
                        <div className="font-medium mb-2">Team Members:</div>
                        {getTeamPlayers('red').length === 0 ? (
                          <p className="text-gray-500 italic">No players yet</p>
                        ) : (
                          getTeamPlayers('red').map((player: any) => (
                            <div key={player.id} className="flex justify-between items-center py-1">
                              <span>{player.username}</span>
                              <span className="text-red-600 font-medium">
                                {player.role === 'spymaster' ? 'üëë' : 'üïµÔ∏è'} {player.role}
                              </span>
                            </div>
                          ))
                        )}
                      </div>
                    </div>

                    {/* Blue Team */}
                    <div className="bg-blue-50 border-2 border-blue-200 rounded-lg p-6">
                      <h3 className="text-2xl font-semibold text-blue-700 mb-4 text-center">
                        üîµ Blue Team
                      </h3>
                      <div className="space-y-3 mb-4">
                        <button
                          onClick={() => handleJoinTeam('blue', 'spymaster')}
                          className="w-full bg-blue-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-blue-600 transition-colors disabled:bg-gray-400"
                          disabled={hasSpymaster('blue')}
                        >
                          {hasSpymaster('blue') ? 'üëë Spymaster Taken' : 'üëë Join as Spymaster'}
                        </button>
                        <button
                          onClick={() => handleJoinTeam('blue', 'operative')}
                          className="w-full bg-blue-400 text-white px-4 py-3 rounded-lg font-semibold hover:bg-blue-500 transition-colors"
                        >
                          üïµÔ∏è Join as Operative
                        </button>
                      </div>
                      <div className="text-sm text-gray-700">
                        <div className="font-medium mb-2">Team Members:</div>
                        {getTeamPlayers('blue').length === 0 ? (
                          <p className="text-gray-500 italic">No players yet</p>
                        ) : (
                          getTeamPlayers('blue').map((player: any) => (
                            <div key={player.id} className="flex justify-between items-center py-1">
                              <span>{player.username}</span>
                              <span className="text-blue-600 font-medium">
                                {player.role === 'spymaster' ? 'üëë' : 'üïµÔ∏è'} {player.role}
                              </span>
                            </div>
                          ))
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Start Game Button */}
                  <div className="text-center">
                    <button
                      onClick={handleStartGame}
                      disabled={!canStartGame()}
                      className="bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white px-8 py-4 rounded-lg text-lg font-semibold transition-colors"
                    >
                      {canStartGame() ? 'üöÄ Start Codenames Game' : '‚è≥ Waiting for Teams'}
                    </button>
                    {!canStartGame() && (
                      <p className="text-sm text-gray-600 mt-2">
                        Need players on both teams to start
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Sidebar - Players and Chat */}
            <div className="space-y-6">
              {/* Players List */}
              <div className="bg-white rounded-lg shadow border border-gray-200 p-4">
                <h3 className="font-semibold text-gray-900 mb-4">
                  üë• Players ({gameState?.players?.length || 0})
                </h3>
                <div className="space-y-2">
                  {gameState?.players?.length > 0 ? (
                    gameState.players.map((player: any) => (
                      <div key={player.id} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                        <div>
                          <div className="font-medium text-gray-900 flex items-center">
                            {player.username}
                            {player.team && player.team !== 'neutral' && (
                              <span className={`ml-2 text-xs px-2 py-1 rounded ${player.team === 'red' ? 'bg-red-100 text-red-700' : 'bg-blue-100 text-blue-700'}`}>
                                {player.team === 'red' ? 'üî¥' : 'üîµ'} {player.role === 'spymaster' ? 'üëë' : 'üïµÔ∏è'}
                              </span>
                            )}
                          </div>
                        </div>
                        <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      </div>
                    ))
                  ) : (
                    <div className="text-gray-500 text-sm text-center py-4">
                      No players yet
                    </div>
                  )}
                </div>
              </div>

              {/* Game Chat */}
              <div className="bg-white rounded-lg shadow border border-gray-200 p-4">
                <h3 className="font-semibold text-gray-900 mb-4">üí¨ Game Chat</h3>
                
                <div className="h-64 overflow-y-auto border border-gray-200 rounded p-2 mb-4 bg-gray-50">
                  {messages.length > 0 ? (
                    messages.map((message) => (
                      <div key={message.id} className="mb-2 text-sm">
                        <span className="font-medium text-blue-600">{message.username}:</span>
                        <span className="text-gray-800 ml-1">{message.text}</span>
                        <div className="text-xs text-gray-500">
                          {new Date(message.timestamp).toLocaleTimeString()}
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-gray-500 text-center py-8">
                      No messages yet. Start the conversation!
                    </div>
                  )}
                </div>

                <div className="flex space-x-2">
                  <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder={isConnected ? "Type a message..." : "Connecting..."}
                    disabled={!isConnected}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                  />
                  <button
                    onClick={sendMessage}
                    disabled={!newMessage.trim() || !isConnected}
                    className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 text-white px-4 py-2 rounded text-sm"
                  >
                    Send
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          {/* Invite Section */}
          <div className="mt-6 bg-blue-50 border border-blue-200 p-4 rounded-lg">
            <h3 className="font-semibold text-blue-900 mb-2">üì± Invite Friends</h3>
            <div className="text-blue-800">
              <p>Share this game code with friends: <span className="bg-blue-100 px-2 py-1 rounded font-mono font-bold">{gameCode}</span></p>
              <p className="text-sm mt-1">They can join by entering this code on the homepage!</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Main Game - All UI handled by GameBoard component
  if (gameState) {
    return (
      <GameBoard 
        gameState={gameState} 
        currentPlayer={getCurrentUserPlayer()}
        onCardClick={(cardId) => {
          console.log('üéØ Card clicked:', cardId);
          if (!isConnected) {
            setError('Not connected to server');
            return;
          }
          console.log('üéØ Emitting game:reveal-card event');
          socketService.socket?.emit('game:reveal-card', cardId);
        }}
        onGiveClue={(word, number) => {
          console.log('üí° Clue given:', word, number);
          if (!isConnected) {
            setError('Not connected to server');
            return;
          }
          if (!word.trim()) {
            setError('Please enter a clue word');
            return;
          }
          if (number < 1 || number > 9) {
            setError('Number must be between 1 and 9');
            return;
          }
          console.log('üí° Emitting game:give-clue event');
          socketService.socket?.emit('game:give-clue', { word: word.trim(), number });
        }}
        onEndTurn={() => {
          console.log('‚è≠Ô∏è End turn');
          if (!isConnected) {
            setError('Not connected to server');
            return;
          }
          console.log('‚è≠Ô∏è Emitting game:end-turn event');
          socketService.socket?.emit('game:end-turn');
        }}
        onStartGame={handleStartGame}
        onJoinTeam={(team, role) => {
          console.log('üë• Join team:', team, role);
          handleJoinTeam(team, role);
        }}
      />
    );
  }

  // Fallback loading state
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
      <div className="text-center">
        <div className="text-xl text-gray-900 mb-4">üîå Connecting to game...</div>
        <div className="w-8 h-8 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto"></div>
      </div>
    </div>
  );
};

export default GamePage;


================================================================================
END OF COMBINED FILES
================================================================================
