================================================================================
COMBINED FILES FOR CLAUDE IMPORT
Generated from 5 files
================================================================================

TABLE OF CONTENTS:
 1. frontend/src/components/GameBoard/GameBoard.tsx
 2. frontend/src/components/GameBoard/Card.tsx
 3. frontend/src/pages/GamePage.tsx
 4. shared/types/game.ts
 5. frontend/tailwind.config.js

================================================================================

============================================================
FILE: frontend/src/components/GameBoard/GameBoard.tsx
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\components\GameBoard\GameBoard.tsx
SIZE: 23273 characters
============================================================
import React, { useState, useEffect } from 'react';
import { CodenamesGame, GamePlayer, TeamColor, PlayerRole, isSoloMode, getSoloTeam } from '../../types/game';
import Card from './Card';
import { gameService } from '../../services/gameService';

interface GameBoardProps {
  gameState: CodenamesGame;
  currentPlayer: GamePlayer | null;
  isConnected: boolean;
}

export const GameBoard: React.FC<GameBoardProps> = ({
  gameState,
  currentPlayer,
  isConnected
}) => {
  const [clueWord, setClueWord] = useState('');
  const [clueNumber, setClueNumber] = useState(1);
  const [chatVisible, setChatVisible] = useState(false);
  const [playersVisible, setPlayersVisible] = useState(false);
  const [infoVisible, setInfoVisible] = useState(false);
  const [settingsVisible, setSettingsVisible] = useState(false);

  // Reset clue input when turn changes or clue is given
  useEffect(() => {
    if (gameState.currentClue) {
      setClueWord('');
      setClueNumber(1);
    }
  }, [gameState.currentClue]);

  const stats = gameService.getTeamStats(gameState);
  const isSpymaster = currentPlayer?.role === 'spymaster';
  const isMyTurn = gameService.isPlayerTurn(gameState, currentPlayer);
  const canGiveClue = gameService.canPlayerGiveClue(gameState, currentPlayer);
  const canRevealCard = gameService.canPlayerRevealCard(gameState, currentPlayer);

  // Game action handlers
  const handleCardClick = (cardId: string) => {
    console.log('üéØ Revealing card:', cardId);
    gameService.revealCard(gameState.gameCode, cardId);
  };

  const handleGiveClue = () => {
    if (clueWord.trim() && clueNumber >= 1 && clueNumber <= 9) {
      console.log('üéØ Giving clue:', clueWord.trim(), clueNumber);
      gameService.giveClue(gameState.gameCode, clueWord.trim(), clueNumber);
    }
  };

  const handleEndTurn = () => {
    console.log('üéØ Ending turn');
    gameService.endTurn(gameState.gameCode);
  };

  const handleStartGame = () => {
    console.log('üéØ Starting game');
    gameService.startGame();
  };

  const handleJoinTeam = (team: TeamColor, role: PlayerRole) => {
    console.log('Join team:', team, role);
    // TODO: Implement via socket
  };

  const getPlayersByTeam = (team: TeamColor) => {
    return gameState.players.filter(p => p.team === team);
  };

  const hasSpymaster = (team: TeamColor) => {
    return gameState.players.some(p => p.team === team && p.role === 'spymaster');
  };

  // Get board glow effect based on current turn and mode
  const getBoardGlowEffect = () => {
    if (gameState.isSoloMode) {
      // Solo mode - use team color
      if (gameState.soloTeam === 'red') {
        return 'shadow-2xl shadow-red-400 ring-4 ring-red-400/80 shadow-red-500/70 drop-shadow-2xl';
      } else {
        return 'shadow-2xl shadow-blue-400 ring-4 ring-blue-400/80 shadow-blue-500/70 drop-shadow-2xl';
      }
    } else {
      // Classic mode - use current turn
      if (gameState.currentTurn === 'red') {
        return 'shadow-2xl shadow-red-400 ring-4 ring-red-400/80 shadow-red-500/70 drop-shadow-2xl';
      } else {
        return 'shadow-2xl shadow-blue-400 ring-4 ring-blue-400/80 shadow-blue-500/70 drop-shadow-2xl';
      }
    }
  };

  if (gameState.status === 'waiting') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900 p-4 relative">
        {/* Background Pattern */}
        <div className="absolute inset-0 opacity-10">
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,_var(--tw-gradient-stops))] from-blue-400 via-transparent to-transparent"></div>
          <div className="absolute inset-0 bg-[linear-gradient(45deg,_transparent_25%,_rgba(255,255,255,0.02)_25%,_rgba(255,255,255,0.02)_50%,_transparent_50%,_transparent_75%,_rgba(255,255,255,0.02)_75%)] bg-[length:60px_60px]"></div>
        </div>
        
        <div className="flex flex-col items-center justify-center min-h-screen">
          <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-xl shadow-2xl border border-slate-600/50 p-8 max-w-4xl w-full backdrop-blur-lg relative z-10">
            
            {/* Current Player Status */}
            {currentPlayer && (
              <div className="text-center mb-6 p-4 bg-slate-700/50 rounded-lg border border-slate-600/50">
                <p className="text-lg text-slate-200">
                  Welcome, <span className="font-semibold text-amber-200">{currentPlayer.username}</span>!
                </p>
                {currentPlayer.team !== 'neutral' && (
                  <p className="text-sm text-slate-300">
                    You are on the{' '}
                    <span className={`font-semibold ${currentPlayer.team === 'red' ? 'text-red-400' : 'text-blue-400'}`}>
                      {currentPlayer.team}
                    </span>{' '}
                    team as a <span className="font-semibold">{currentPlayer.role}</span>
                  </p>
                )}
              </div>
            )}
            
            {/* Team Selection */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              {/* Red Team */}
              <div className="bg-gradient-to-br from-red-900/60 to-red-800/40 border-2 border-red-500/50 rounded-lg p-6 backdrop-blur-sm">
                <h3 className="text-2xl font-semibold text-red-200 mb-4 text-center">
                  üî¥ Red Team
                </h3>
                <div className="space-y-3 mb-4">
                  <button
                    onClick={() => handleJoinTeam('red', 'spymaster')}
                    className="w-full bg-red-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-red-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                    disabled={hasSpymaster('red')}
                  >
                    {hasSpymaster('red') ? 'üìª Spymaster Taken' : 'üìª Join as Spymaster'}
                  </button>
                  <button
                    onClick={() => handleJoinTeam('red', 'operative')}
                    className="w-full bg-red-400 text-white px-4 py-3 rounded-lg font-semibold hover:bg-red-500 transition-colors"
                  >
                    üïµÔ∏è Join as Operative
                  </button>
                </div>
                <div className="text-sm text-slate-300">
                  <div className="font-medium mb-2">Team Members:</div>
                  {getPlayersByTeam('red').length === 0 ? (
                    <p className="text-slate-400 italic">No players yet</p>
                  ) : (
                    getPlayersByTeam('red').map(player => (
                      <div key={player.id} className="flex justify-between items-center py-1">
                        <span>{player.username}</span>
                        <span className="text-red-400 font-medium">
                          {player.role === 'spymaster' ? 'üìª' : 'üïµÔ∏è'} {player.role}
                        </span>
                      </div>
                    ))
                  )}
                </div>
              </div>

              {/* Blue Team */}
              <div className="bg-gradient-to-br from-blue-900/60 to-blue-800/40 border-2 border-blue-500/50 rounded-lg p-6 backdrop-blur-sm">
                <h3 className="text-2xl font-semibold text-blue-200 mb-4 text-center">
                  üîµ Blue Team
                </h3>
                <div className="space-y-3 mb-4">
                  <button
                    onClick={() => handleJoinTeam('blue', 'spymaster')}
                    className="w-full bg-blue-500 text-white px-4 py-3 rounded-lg font-semibold hover:bg-blue-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                    disabled={hasSpymaster('blue')}
                  >
                    {hasSpymaster('blue') ? 'üìª Spymaster Taken' : 'üìª Join as Spymaster'}
                  </button>
                  <button
                    onClick={() => handleJoinTeam('blue', 'operative')}
                    className="w-full bg-blue-400 text-white px-4 py-3 rounded-lg font-semibold hover:bg-blue-500 transition-colors"
                  >
                    üïµÔ∏è Join as Operative
                  </button>
                </div>
                <div className="text-sm text-slate-300">
                  <div className="font-medium mb-2">Team Members:</div>
                  {getPlayersByTeam('blue').length === 0 ? (
                    <p className="text-slate-400 italic">No players yet</p>
                  ) : (
                    getPlayersByTeam('blue').map(player => (
                      <div key={player.id} className="flex justify-between items-center py-1">
                        <span>{player.username}</span>
                        <span className="text-blue-400 font-medium">
                          {player.role === 'spymaster' ? 'üìª' : 'üïµÔ∏è'} {player.role}
                        </span>
                      </div>
                    ))
                  )}
                </div>
              </div>
            </div>

            {/* Start Game Button */}
            <div className="text-center">
              <button
                onClick={handleStartGame}
                className="bg-gradient-to-r from-emerald-600 to-emerald-700 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:from-emerald-700 hover:to-emerald-800 transition-all duration-200 disabled:from-slate-600 disabled:to-slate-700 disabled:cursor-not-allowed shadow-lg"
                disabled={gameState.players.length === 0}
              >
                üöÄ Start Game
              </button>
              <p className="text-sm text-slate-400 mt-3">
                Need players on both teams to start
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900 overflow-hidden relative">
      {/* Background Pattern */}
      <div className="absolute inset-0 opacity-10">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,_var(--tw-gradient-stops))] from-blue-400 via-transparent to-transparent"></div>
        <div className="absolute inset-0 bg-[linear-gradient(45deg,_transparent_25%,_rgba(255,255,255,0.02)_25%,_rgba(255,255,255,0.02)_50%,_transparent_50%,_transparent_75%,_rgba(255,255,255,0.02)_75%)] bg-[length:60px_60px]"></div>
      </div>

      {/* Centered Layout Container */}
      <div className="min-h-screen flex justify-center p-4">
        <div className="flex flex-col items-center space-y-4 max-w-4xl w-full">
          
          {/* Icons positioned above the game board */}
          <div className="flex mb-2">
            <div className="flex space-x-2">
              <button
                onClick={() => setChatVisible(!chatVisible)}
                className={`w-10 h-10 rounded-lg shadow-lg border transition-all duration-200 flex items-center justify-center text-sm backdrop-blur-sm ${
                  chatVisible 
                    ? 'bg-gradient-to-br from-emerald-600 to-emerald-700 text-white border-emerald-400/50' 
                    : 'bg-gradient-to-br from-slate-700/80 to-slate-800/80 text-slate-200 border-slate-500/50 hover:from-slate-600/80 hover:to-slate-700/80'
                }`}
                title="Chat"
              >
                üí¨
              </button>
              <button
                onClick={() => setPlayersVisible(!playersVisible)}
                className={`w-10 h-10 rounded-lg shadow-lg border transition-all duration-200 flex items-center justify-center text-sm backdrop-blur-sm ${
                  playersVisible 
                    ? 'bg-gradient-to-br from-blue-600 to-blue-700 text-white border-blue-400/50' 
                    : 'bg-gradient-to-br from-slate-700/80 to-slate-800/80 text-slate-200 border-slate-500/50 hover:from-slate-600/80 hover:to-slate-700/80'
                }`}
                title="Players"
              >
                üë•
              </button>
              <button
                onClick={() => setInfoVisible(!infoVisible)}
                className={`w-10 h-10 rounded-lg shadow-lg border transition-all duration-200 flex items-center justify-center text-sm backdrop-blur-sm ${
                  infoVisible 
                    ? 'bg-gradient-to-br from-amber-600 to-amber-700 text-white border-amber-400/50' 
                    : 'bg-gradient-to-br from-slate-700/80 to-slate-800/80 text-slate-200 border-slate-500/50 hover:from-slate-600/80 hover:to-slate-700/80'
                }`}
                title="Info"
              >
                ‚ÑπÔ∏è
              </button>
              <button
                onClick={() => setSettingsVisible(!settingsVisible)}
                className="w-10 h-10 bg-gradient-to-br from-slate-700/80 to-slate-800/80 rounded-lg shadow-lg border border-slate-600/50 flex items-center justify-center hover:from-slate-600/80 hover:to-slate-700/80 transition-all duration-200 backdrop-blur-sm relative"
                title="Settings"
              >
                <span className="text-slate-200 text-sm">‚öôÔ∏è</span>
                
                {/* Settings Dropdown */}
                {settingsVisible && (
                  <div className="absolute top-12 right-0 bg-gradient-to-br from-slate-800/95 to-slate-900/95 rounded-lg shadow-2xl border border-slate-600/50 p-3 min-w-32 backdrop-blur-lg z-60">
                    <button
                      onClick={() => window.location.href = '/'}
                      className="w-full bg-slate-700 hover:bg-slate-600 text-slate-200 px-3 py-2 rounded-lg text-sm font-medium transition-colors text-left"
                    >
                      üè† Logout
                    </button>
                  </div>
                )}
              </button>
            </div>
          </div>
          
          {/* Current Clue Display */}
          {gameState.currentClue && (
            <div className="px-6 py-3 bg-gradient-to-r from-violet-900/90 to-indigo-900/90 border border-violet-500/50 rounded-xl shadow-xl backdrop-blur-lg">
              <span className="text-lg font-bold text-violet-100 drop-shadow-lg">
                üí° {gameState.currentClue.word} ({gameState.currentClue.number})
              </span>
              {gameState.guessesRemaining > 0 && (
                <span className="ml-3 text-sm text-violet-300">
                  {gameState.guessesRemaining} left
                </span>
              )}
            </div>
          )}

          {/* THE MAIN 5x5 GAME BOARD with Turn-Based Glow Effect */}
          <div className={`relative bg-gradient-to-br from-slate-800/90 via-slate-700/70 to-slate-800/90 rounded-2xl p-6 transition-all duration-700 ${getBoardGlowEffect()} border-2 border-slate-600/50 backdrop-blur-lg`}>
            {/* Board Game Texture with Turn Indicator */}
            <div className="absolute inset-0 rounded-2xl bg-[radial-gradient(circle_at_30%_20%,_rgba(139,69,19,0.1)_0%,_transparent_50%)] pointer-events-none"></div>
            <div className="absolute inset-0 rounded-2xl bg-[linear-gradient(45deg,_transparent_30%,_rgba(160,82,45,0.05)_30%,_rgba(160,82,45,0.05)_70%,_transparent_70%)] bg-[length:20px_20px] pointer-events-none"></div>
            {/* Turn Indicator Overlay */}
            <div className={`absolute inset-0 rounded-2xl pointer-events-none transition-all duration-700 ${
              gameState.currentTurn === 'red' 
                ? 'bg-gradient-to-br from-red-500/10 via-transparent to-red-500/5' 
                : 'bg-gradient-to-br from-blue-500/10 via-transparent to-blue-500/5'
            }`}></div>
            <div className="relative z-10">
              <div className="grid grid-cols-5 gap-3">
                {gameState.board && Array.isArray(gameState.board) ? gameState.board
                  .sort((a, b) => a.position - b.position)
                  .map((card) => (
                    <Card
                      key={card.id}
                      card={card}
                      isSpymaster={isSpymaster}
                      onClick={canRevealCard ? handleCardClick : undefined}
                      disabled={!canRevealCard}
                    />
                  )) : (
                    <div className="text-center text-white">
                      <div className="text-xl mb-2">‚ö†Ô∏è Board not loaded</div>
                      <div className="text-sm opacity-75">Game board data is missing</div>
                    </div>
                  )}
              </div>
            </div>
          </div>

          {/* Controls Below Board */}
          {canGiveClue && (
            <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-xl shadow-xl p-4 w-full max-w-2xl backdrop-blur-lg border border-slate-600/50">
              <div className="flex items-end space-x-3">
                <div className="flex-1">
                  <input
                    type="text"
                    value={clueWord}
                    onChange={(e) => setClueWord(e.target.value)}
                    className="w-full px-3 py-2 bg-slate-700/50 border border-slate-500 rounded-lg focus:outline-none focus:ring-2 focus:ring-violet-400 text-slate-100 placeholder-slate-400"
                    placeholder="Clue word..."
                    required
                  />
                </div>
                <input
                  type="number"
                  min="1"
                  max="9"
                  value={clueNumber}
                  onChange={(e) => setClueNumber(parseInt(e.target.value) || 1)}
                  className="w-16 px-3 py-2 bg-slate-700/50 border border-slate-500 rounded-lg focus:outline-none focus:ring-2 focus:ring-violet-400 text-slate-100 text-center"
                />
                <button
                  onClick={handleGiveClue}
                  className="bg-gradient-to-r from-emerald-600 to-emerald-700 text-white px-6 py-2 rounded-lg hover:from-emerald-700 hover:to-emerald-800 transition-all duration-200 font-semibold shadow-lg"
                >
                  Give Clue
                </button>
              </div>
            </div>
          )}

          {/* Solo Mode Controls */}
          {gameState.isSoloMode && canRevealCard && (
            <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-xl shadow-xl p-4 text-center backdrop-blur-lg border border-slate-600/50">
              <p className="text-slate-200 mb-3">
                üéØ Click a card to reveal it ({gameState.soloTurnGuessesRemaining || 0} guesses this turn, {gameState.soloCluesRemaining || 0} clues left)
              </p>
              <div className="text-sm text-slate-400 mb-3">
                <span className="text-emerald-400">‚úÖ Your team: No penalty</span> ‚Ä¢ 
                <span className="text-yellow-400"> ‚ö™ Neutral: End turn</span> ‚Ä¢ 
                <span className="text-red-400"> ‚ùå Enemy: End turn + lose clue</span> ‚Ä¢ 
                <span className="text-red-600"> üíÄ Assassin: Game over</span>
              </div>
            </div>
          )}
          
          {/* Classic Mode Controls */}
          {!gameState.isSoloMode && canRevealCard && (
            <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-xl shadow-xl p-4 text-center backdrop-blur-lg border border-slate-600/50">
              <p className="text-slate-200 mb-3">
                üéØ Click a card to guess ({gameState.guessesRemaining} left)
              </p>
              <button
                onClick={handleEndTurn}
                className="bg-gradient-to-r from-orange-500 to-orange-600 text-white px-6 py-2 rounded-lg hover:from-orange-600 hover:to-orange-700 transition-colors font-semibold shadow-lg"
              >
                ‚è≠Ô∏è End Turn
              </button>
            </div>
          )}

          {!gameState.isSoloMode && !isMyTurn && currentPlayer && currentPlayer.team !== 'neutral' && (
            <div className="bg-gradient-to-br from-slate-800/90 to-slate-900/90 rounded-xl p-4 text-center max-w-md backdrop-blur-lg border border-slate-600/50">
              <p className="text-slate-300">
                ‚è≥ Waiting for {gameState.currentTurn === 'red' ? 'üî¥' : 'üîµ'} team...
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Game Over Modal */}
      {gameState.status === 'finished' && gameState.winner && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-gradient-to-br from-slate-800 to-slate-900 rounded-xl p-8 max-w-md w-full mx-4 shadow-2xl border border-slate-600">
            {gameState.isSoloMode ? (
              // Solo mode results
              gameState.winner === gameState.soloTeam ? (
                <>
                  <h2 className="text-4xl font-bold text-center mb-4 text-emerald-100">üéâ Victory! üéâ</h2>
                  <div className="text-2xl font-bold text-center mb-6 text-emerald-400">
                    You found all your team's words!
                  </div>
                </>
              ) : gameState.winner === 'assassin' ? (
                <>
                  <h2 className="text-4xl font-bold text-center mb-4 text-red-100">üíÄ Game Over üíÄ</h2>
                  <div className="text-2xl font-bold text-center mb-6 text-red-400">
                    You hit the assassin!
                  </div>
                </>
              ) : (
                <>
                  <h2 className="text-4xl font-bold text-center mb-4 text-yellow-100">üòî Out of Clues üòî</h2>
                  <div className="text-2xl font-bold text-center mb-6 text-yellow-400">
                    You ran out of clues!
                  </div>
                </>
              )
            ) : (
              // Classic mode results
              <>
                <h2 className="text-4xl font-bold text-center mb-4 text-amber-100">üéâ Game Over! üéâ</h2>
                <div className={`text-3xl font-bold text-center mb-6 ${gameState.winner === 'red' ? 'text-red-400' : 'text-blue-400'}`}>
                  {gameState.winner === 'red' ? 'üî¥' : 'üîµ'} {gameState.winner.charAt(0).toUpperCase() + gameState.winner.slice(1)} Team Wins!
                </div>
              </>
            )}
            <div className="flex gap-4">
              <button
                onClick={() => window.location.reload()}
                className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-3 rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-semibold"
              >
                üîÑ New Game
              </button>
              <button
                onClick={() => console.log('Reset game')}
                className="flex-1 bg-gradient-to-r from-emerald-600 to-emerald-700 text-white px-6 py-3 rounded-lg hover:from-emerald-700 hover:to-emerald-800 transition-all duration-200 font-semibold"
              >
                üéÆ Play Again
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GameBoard;


============================================================
FILE: frontend/src/components/GameBoard/Card.tsx
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\components\GameBoard\Card.tsx
SIZE: 6202 characters
============================================================
import React, { useState } from 'react';
import { CodeCard, TeamColor } from '../../types/game';

interface CardProps {
  card: CodeCard;
  isSpymaster: boolean;
  onClick?: (cardId: string) => void;
  disabled?: boolean;
  className?: string;
}

const getCardColors = (team: TeamColor, isRevealed: boolean, isSpymaster: boolean) => {
  if (isRevealed) {
    // Revealed cards with premium board game styling
    switch (team) {
      case 'red':
        return 'bg-gradient-to-br from-red-600 via-red-500 to-red-700 text-white border-red-800 shadow-2xl shadow-red-500/25';
      case 'blue':
        return 'bg-gradient-to-br from-blue-600 via-blue-500 to-blue-700 text-white border-blue-800 shadow-2xl shadow-blue-500/25';
      case 'neutral':
        return 'bg-gradient-to-br from-slate-500 via-slate-400 to-slate-600 text-white border-slate-700 shadow-2xl shadow-slate-500/25';
      case 'assassin':
        return 'bg-gradient-to-br from-gray-900 via-black to-gray-800 text-red-400 border-red-900 shadow-2xl shadow-red-900/50';
      default:
        return 'bg-gradient-to-br from-stone-300 to-stone-400 text-stone-800 border-stone-500';
    }
  } else if (isSpymaster) {
    // Spymaster view with subtle team colors on premium card base
    switch (team) {
      case 'red':
        return 'bg-gradient-to-br from-slate-700/80 via-red-900/40 to-slate-700/80 border-red-400/50 text-red-200 hover:from-red-800/60 hover:to-red-700/60 shadow-lg hover:shadow-red-500/30 backdrop-blur-sm';
      case 'blue':
        return 'bg-gradient-to-br from-slate-700/80 via-blue-900/40 to-slate-700/80 border-blue-400/50 text-blue-200 hover:from-blue-800/60 hover:to-blue-700/60 shadow-lg hover:shadow-blue-500/30 backdrop-blur-sm';
      case 'neutral':
        return 'bg-gradient-to-br from-slate-700/80 via-slate-600/40 to-slate-700/80 border-slate-400/50 text-slate-200 hover:from-slate-600/80 hover:to-slate-500/80 shadow-lg hover:shadow-slate-500/30 backdrop-blur-sm';
      case 'assassin':
        return 'bg-gradient-to-br from-slate-800/80 via-red-900/60 to-slate-800/80 border-red-500 text-red-300 hover:from-red-900/80 hover:to-red-800/80 shadow-lg hover:shadow-red-600/50 font-bold backdrop-blur-sm';
      default:
        return 'bg-gradient-to-br from-slate-700/80 to-slate-600/80 border-slate-400 text-slate-200 hover:from-slate-600/80 hover:to-slate-500/80 backdrop-blur-sm';
    }
  } else {
    // Regular players see dark card base
    return 'bg-gradient-to-br from-slate-700/80 via-slate-600/60 to-slate-700/80 border-slate-500 text-slate-100 hover:from-slate-600/80 hover:to-slate-600/80 hover:border-slate-400 shadow-lg hover:shadow-slate-500/50 backdrop-blur-sm';
  }
};

const getTeamEmoji = (team: TeamColor) => {
  switch (team) {
    case 'red': return 'üî¥';
    case 'blue': return 'üîµ';
    case 'neutral': return '‚ö™';
    case 'assassin': return 'üíÄ';
    default: return '';
  }
};

export const Card: React.FC<CardProps> = ({ 
  card, 
  isSpymaster, 
  onClick, 
  disabled = false,
  className = ''
}) => {
  const [showSubmit, setShowSubmit] = useState(false);

  const handleClick = () => {
    if (!disabled && onClick && !card.isRevealed) {
      setShowSubmit(true);
    }
  };

  const handleSubmit = () => {
    if (onClick) {
      onClick(card.id);
      setShowSubmit(false);
    }
  };

  const handleCancel = () => {
    setShowSubmit(false);
  };

  const colors = getCardColors(card.team, card.isRevealed, isSpymaster);
  const clickable = !disabled && onClick && !card.isRevealed;

  return (
    <div
      className={`
        relative w-20 h-20 sm:w-24 sm:h-24 md:w-28 md:h-28 lg:w-32 lg:h-32 p-2 sm:p-3 border-2 rounded-xl flex items-center justify-center
        transition-all duration-300 font-semibold text-center cursor-pointer
        ${colors}
        ${clickable ? 'transform hover:scale-105 hover:shadow-xl hover:-translate-y-1 active:scale-95' : 'cursor-default'}
        ${disabled ? 'opacity-50' : ''}
        ${showSubmit ? 'ring-4 ring-violet-400 ring-opacity-50 scale-105 shadow-xl' : ''}
        ${className}
        backdrop-blur-sm
      `}
      onClick={handleClick}
      role={clickable ? 'button' : 'text'}
      tabIndex={clickable ? 0 : -1}
      onKeyDown={(e) => {
        if ((e.key === 'Enter' || e.key === ' ') && clickable) {
          e.preventDefault();
          handleClick();
        }
      }}
    >
      {/* Word - hidden when submit buttons are shown */}
      {!showSubmit && (
        <span className="font-bold text-xs sm:text-sm md:text-base leading-tight break-words px-1">
          {card.word.replace(/_/g, ' ')}
        </span>
      )}

      {/* Enhanced Submit/Cancel buttons */}
      {showSubmit && !card.isRevealed && (
        <div className="flex flex-col gap-2 w-full">
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleSubmit();
            }}
            className="bg-gradient-to-r from-emerald-600 to-emerald-700 text-white px-2 py-1 rounded-md text-xs font-bold hover:from-emerald-700 hover:to-emerald-800 transition-all duration-200 shadow-lg transform hover:scale-105 border border-emerald-500"
          >
            ‚úì GUESS
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleCancel();
            }}
            className="bg-gradient-to-r from-slate-600 to-slate-700 text-white px-2 py-1 rounded-md text-xs hover:from-slate-700 hover:to-slate-800 transition-all duration-200 shadow-lg border border-slate-500"
          >
            ‚úó Cancel
          </button>
        </div>
      )}

      {/* Enhanced revealed indicator */}
      {card.isRevealed && (
        <div className="absolute top-1 right-1 w-2 h-2 bg-white rounded-full opacity-90 shadow-sm" />
      )}

      {/* Enhanced spymaster team indicator */}
      {isSpymaster && !card.isRevealed && !showSubmit && (
        <div className="absolute bottom-1 left-1 text-sm bg-gradient-to-br from-slate-600/90 to-slate-700/90 rounded-full p-1 shadow-lg border border-slate-400/50 backdrop-blur-sm">
          {getTeamEmoji(card.team)}
        </div>
      )}
    </div>
  );
};

export default Card;


============================================================
FILE: frontend/src/pages/GamePage.tsx
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\src\pages\GamePage.tsx
SIZE: 11262 characters
============================================================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { socketService } from '../services/socketService';
import { gameService } from '../services/gameService';
import GameBoard from '../components/GameBoard/GameBoard';

const GamePage: React.FC = () => {
  const { gameId } = useParams<{ gameId: string }>();
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [gameState, setGameState] = useState<any>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [currentUser, setCurrentUser] = useState<any>(null);

  useEffect(() => {
    if (!gameId) return;
    
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    setCurrentUser(user);
    loadGameAndConnect();
    
    return () => {
      gameService.removeAllGameListeners();
      if (socketService.socket) {
        socketService.socket.off('game:state-updated');
        socketService.socket.off('game:clue-given');
        socketService.socket.off('game:card-revealed');
        socketService.socket.off('game:turn-changed');
        socketService.socket.off('game:game-ended');
      }
    };
  }, [gameId]);

  const loadGameAndConnect = async () => {
    
    
    if (!gameId) {
      
      setError('No game ID provided');
      setIsLoading(false);
      return;
    }

    try {
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      const token = localStorage.getItem('token');
      
      
      
      if (!user.username || !token) {
        
        setError('Please log in first');
        setIsLoading(false);
        return;
      }

      // Load game state
      
      const gameResponse = await fetch(`/api/games/${gameId}`);
      
      
      
      if (gameResponse.ok) {
        const gameData = await gameResponse.json();
        
        
        if (gameData.success) {
          
          
          
          
          setGameState(gameData.game);
          
          // Allow waiting games to proceed (they'll show team setup)
          // Only reject if the game is in an invalid state
          if (gameData.game.status === 'finished') {
            console.log('üèÅ Game is finished, proceeding to show results');
          } else if (gameData.game.status === 'waiting') {
            console.log('‚è≥ Game is in waiting/setup state, will show team selection');
          } else {
            console.log(`üéÆ Game status: ${gameData.game.status}`);
          }
          
          
          // Connect to game socket
          await connectToGame(gameId, token, user);
          
          setIsLoading(false);
        } else {
          
          throw new Error(gameData.error || 'Failed to load game');
        }
      } else if (gameResponse.status === 404) {
        
        setError('Game not found');
        setIsLoading(false);
        return;
      } else {
        
        throw new Error('Failed to load game');
      }
      
    } catch (err: any) {
      
      setError(err.message || 'Unable to connect to game');
      setIsLoading(false);
    }
  };

  const connectToGame = async (gameId: string, token: string, user: any) => {
    if (isConnected && socketService.socket?.connected) {
      return Promise.resolve();
    }
    
    return new Promise<void>((resolve) => {
      if (!socketService.socket?.connected) {
        console.log('‚ùå No socket connection available');
        return;
      }

      const handleAuth = () => {
        socketService.socket?.emit('join-game', gameId);
        setIsConnected(true);
        setupGameListeners();
        resolve();
      };

      socketService.onAuthenticated((data: any) => {
        if (data.success) handleAuth();
      });
      
      socketService.authenticate(token);
      
      if (socketService.socket?.connected && !isConnected) {
        handleAuth();
      }
    });
  };

  const setupGameListeners = () => {
    gameService.removeAllGameListeners();
    
    gameService.onGameStateUpdated((newGameState: any) => {
      console.log('üéÆ Game state updated:', newGameState);
      
      // üîç DEBUG: Check clue in received game state
      console.log('üîç [STATE UPDATE] Current clue in new state:', newGameState.currentClue);
      console.log('üîç [STATE UPDATE] Guesses remaining:', newGameState.guessesRemaining);
      console.log('üîç [STATE UPDATE] Before setting state, old clue was:', gameState?.currentClue);
      
      // üîç DEBUG: Check solo mode status
      console.log('üîç [SOLO MODE DEBUG] isSoloMode:', newGameState.isSoloMode);
      console.log('üîç [SOLO MODE DEBUG] soloTeam:', newGameState.soloTeam);
      console.log('üîç [SOLO MODE DEBUG] Red team:', newGameState.redTeam ? 'exists' : 'null');
      console.log('üîç [SOLO MODE DEBUG] Blue team:', newGameState.blueTeam ? 'exists' : 'null');
      
      setGameState(newGameState);
      
      console.log('üîç [STATE UPDATE] State should now be updated with clue');
    });

    gameService.onGameError((error: string) => {
      console.error('üéÆ Game error:', error);
      setError(error);
      setTimeout(() => setError(''), 3000);
    });
    
    if (socketService.socket) {
      socketService.socket.on('game:clue-given', (clue: any) => {
        console.log('üí° Clue given:', clue);
        console.log('üîç [CLUE EVENT] Current gameState.currentClue before this event:', gameState?.currentClue);
        console.log('üîç [CLUE EVENT] This might be redundant if game:state-updated is working');
      });
      
      socketService.socket.on('game:card-revealed', (card: any) => {
        console.log('üéØ Card revealed:', card);
      });
      
      socketService.socket.on('game:turn-changed', (newTurn: string) => {
        console.log('‚è≠Ô∏è Turn changed:', newTurn);
      });
      
      socketService.socket.on('game:game-ended', (winner: string) => {
        console.log('üèÜ Game ended, winner:', winner);
      });
    }
  };

  const getCurrentUserPlayer = () => {
    if (!gameState || !currentUser) return null;
    
    // Check red team spymaster
    if (gameState.redTeam?.spymaster && 
        (gameState.redTeam.spymaster.username === currentUser.username || 
         gameState.redTeam.spymaster.id === currentUser.id)) {
      return {
        ...gameState.redTeam.spymaster,
        team: 'red' as const,
        role: 'spymaster' as const
      };
    }
    
    // Check red team operatives
    if (gameState.redTeam?.operatives) {
      const redOperative = gameState.redTeam.operatives.find((p: any) => 
        p.username === currentUser.username || p.id === currentUser.id
      );
      if (redOperative) {
        return {
          ...redOperative,
          team: 'red' as const,
          role: 'operative' as const
        };
      }
    }
    
    // Check blue team spymaster
    if (gameState.blueTeam?.spymaster && 
        (gameState.blueTeam.spymaster.username === currentUser.username || 
         gameState.blueTeam.spymaster.id === currentUser.id)) {
      return {
        ...gameState.blueTeam.spymaster,
        team: 'blue' as const,
        role: 'spymaster' as const
      };
    }
    
    // Check blue team operatives
    if (gameState.blueTeam?.operatives) {
      const blueOperative = gameState.blueTeam.operatives.find((p: any) => 
        p.username === currentUser.username || p.id === currentUser.id
      );
      if (blueOperative) {
        return {
          ...blueOperative,
          team: 'blue' as const,
          role: 'operative' as const
        };
      }
    }
    
    return null;
  };

  // Loading State
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
        <div className="text-center bg-white p-8 rounded-2xl shadow-xl">
          <div className="text-2xl font-bold text-gray-900 mb-4">üéÆ Loading Game...</div>
          <div className="text-gray-600 mb-6">Game: <span className="font-mono bg-gray-100 px-2 py-1 rounded">{gameId}</span></div>
          <div className="flex justify-center">
            <div className="w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
          </div>
        </div>
      </div>
    );
  }

  // Error State
  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
        <div className="text-center bg-white p-8 rounded-2xl shadow-xl max-w-md">
          <div className="text-red-600 text-2xl font-bold mb-4">üö® Game Error</div>
          <div className="text-gray-600 mb-6">
            <p>Game: <span className="font-mono bg-gray-100 px-2 py-1 rounded font-bold">{gameId}</span></p>
            <p className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg text-sm">{error}</p>
          </div>
          <div className="space-y-3">
            <button 
              onClick={() => navigate('/')}
              className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 shadow-lg"
            >
              üè† Go Back to Home
            </button>
            <button 
              onClick={() => window.location.reload()}
              className="w-full bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 shadow-lg"
            >
              üîÑ Try Again
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Game State - Render the actual game
  if (gameState) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900 relative">
        {/* Background Pattern */}
        <div className="absolute inset-0 opacity-10">
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,_var(--tw-gradient-stops))] from-blue-400 via-transparent to-transparent"></div>
          <div className="absolute inset-0 bg-[linear-gradient(45deg,_transparent_25%,_rgba(255,255,255,0.02)_25%,_rgba(255,255,255,0.02)_50%,_transparent_50%,_transparent_75%,_rgba(255,255,255,0.02)_75%)] bg-[length:60px_60px]"></div>
        </div>

        {/* Game Content */}
        <div className="relative z-10">
          {/* Error Display */}
          {error && (
            <div className="mb-6 mx-4 p-4 bg-red-900/50 border border-red-500/50 rounded-lg">
              <p className="text-red-200">{error}</p>
            </div>
          )}

          {/* Game Board */}
          <GameBoard 
            gameState={gameState}
            currentPlayer={getCurrentUserPlayer()}
            isConnected={isConnected}
          />
        </div>
      </div>
    );
  }

  // Fallback - should not reach here
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center pt-16">
      <div className="text-center">
        <div className="text-2xl font-bold text-gray-900 mb-4">üéÆ Codenames</div>
        <p className="text-gray-600">Game not found</p>
      </div>
    </div>
  );
};

export default GamePage;


============================================================
FILE: shared/types/game.ts
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\shared\types\game.ts
SIZE: 9732 characters
============================================================
// Shared Game Types for Codenames - Phase 2
// Integrates with existing shared/types/index.ts

export type TeamColor = 'red' | 'blue' | 'neutral' | 'assassin';
export type PlayerRole = 'spymaster' | 'operative';
export type GameStatus = 'waiting' | 'setup' | 'playing' | 'finished';

export interface CodeCard {
  id: string;
  word: string;
  team: TeamColor;
  isRevealed: boolean;
  revealedBy?: string; // player id who revealed it
  position: number; // 0-24 for 5x5 grid
}

export interface GamePlayer {
  id: string;
  username: string;
  isOnline: boolean;
  socketId: string;
  // Note: team and role removed - now determined by team structure position
}

export interface GameClue {
  word: string;
  number: number;
  givenBy: string; // player id
  timestamp: string;
}

// New Team structure
export interface Team {
  spymaster: GamePlayer;
  operatives: GamePlayer[];
}

export interface CodenamesGame {
  id: string;
  gameCode: string;
  status: GameStatus;
  currentTurn: TeamColor;
  redTeam?: Team;   // undefined if empty
  blueTeam?: Team;  // undefined if empty
  board: CodeCard[];
  currentClue?: GameClue;
  guessesRemaining: number;
  isSoloMode?: boolean;
  soloCluesRemaining?: number; // Number of clues remaining (starts at 5)
  soloTurnGuessesRemaining?: number; // Guesses left in current turn
  soloTeam?: TeamColor; // which team is playing in solo mode
  winner?: TeamColor;
  createdAt: string;
  updatedAt: string;
}

export interface GameConfig {
  boardSize: number; // Always 25 for 5x5
  redCards: number;   // 9 or 8
  blueCards: number;  // 8 or 9  
  neutralCards: number; // 7
  assassinCards: number; // 1
}

// Game Lobby Types (team assignment phase) - Updated for new structure
export interface GameLobbyMessage {
  id: string;
  username: string;
  userId: string;
  text: string;
  timestamp: string;
}

export interface GameLobbyPlayer {
  id: string;
  username: string;
  team: TeamColor;
  role: PlayerRole;
  isOnline: boolean;
  isOwner: boolean;
}

export interface GameLobby {
  id: string;
  code: string;
  owner: string;
  players: GameLobbyPlayer[];
  status: 'waiting' | 'playing' | 'finished';
  createdAt: string;
  updatedAt: string;
}

// Socket Events for Game (extends existing socket events)
export interface GameSocketEvents {
  // Game Management
  'game:create': () => void;
  'game:join': (gameId: string) => void;
  'game:start': () => void;
  'game:reset': () => void;
  
  // Team/Role Assignment
  'game:join-team': (team: TeamColor, role: PlayerRole) => void;
  
  // Game Actions
  'game:give-clue': (clue: { word: string; number: number }) => void;
  'game:reveal-card': (cardId: string) => void;
  'game:end-turn': () => void;
  
  // Game State Updates (server to client)
  'game:state-updated': (game: CodenamesGame) => void;
  'game:player-joined': (player: GamePlayer) => void;
  'game:card-revealed': (card: CodeCard) => void;
  'game:clue-given': (clue: GameClue) => void;
  'game:turn-changed': (newTurn: TeamColor) => void;
  'game:game-ended': (winner: TeamColor) => void;
  'game:error': (error: string) => void;
}

// Game Constants
export const GAME_CONFIG = {
  BOARD_SIZE: 25,
  MIN_PLAYERS: 1,
  MAX_PLAYERS: 8,
  STANDARD_SETUP: {
    boardSize: 25,
    redCards: 9,
    blueCards: 8,
    neutralCards: 7,
    assassinCards: 1
  } as GameConfig
};

// Helper functions for new team structure
export const getPlayerTeam = (game: CodenamesGame, playerId: string): TeamColor => {
  if (game.redTeam?.spymaster.id === playerId) return 'red';
  if (game.redTeam?.operatives.some(p => p.id === playerId)) return 'red';
  if (game.blueTeam?.spymaster.id === playerId) return 'blue';
  if (game.blueTeam?.operatives.some(p => p.id === playerId)) return 'blue';
  return 'neutral';
};

export const getPlayerRole = (game: CodenamesGame, playerId: string): PlayerRole => {
  if (game.redTeam?.spymaster.id === playerId || game.blueTeam?.spymaster.id === playerId) {
    return 'spymaster';
  }
  return 'operative';
};

export const getAllPlayers = (game: CodenamesGame): GamePlayer[] => {
  const players: GamePlayer[] = [];
  if (game.redTeam) {
    players.push(game.redTeam.spymaster, ...game.redTeam.operatives);
  }
  if (game.blueTeam) {
    players.push(game.blueTeam.spymaster, ...game.blueTeam.operatives);
  }
  return players;
};

export const isTeamValid = (team?: Team): boolean => {
  console.log(`team: {team}, spymaster: ${team?.spymaster}, operatives: ${team?.operatives.length}`);
  return !!team && !!team.spymaster && team.operatives.length > 0;
};

export const canStartGame = (game: CodenamesGame): boolean => {
  const redValid = isTeamValid(game.redTeam);
  const blueValid = isTeamValid(game.blueTeam);
  
  console.log('üîç [CANSTART] Red valid:', redValid, 'Blue valid:', blueValid);
  
  // Allow game to start with at least one valid team
  const canStart = redValid || blueValid;
  console.log('üîç [CANSTART] Final result:', canStart);
  
  return canStart;
};


// Solo mode helpers
// Solo Mode Rules:
// - Team gets 5 clues total
// - Spymaster gives clue (word + number) ‚Üí -1 clue
// - Operatives can guess (clue number + 1) words per turn  
// - Penalties: Neutral=end turn, Enemy=end turn + lose 1 clue, Assassin=game over
// - Win: Find all team cards, Lose: Run out of clues
export const isSoloMode = (game: CodenamesGame): boolean => {
  const redValid = isTeamValid(game.redTeam);
  const blueValid = isTeamValid(game.blueTeam);
  return (redValid && !blueValid) || (!redValid && blueValid);
};

export const getSoloTeam = (game: CodenamesGame): TeamColor => {
  if (isTeamValid(game.redTeam)) return 'red';
  if (isTeamValid(game.blueTeam)) return 'blue';
  return 'neutral';
};

export const getSoloTeamCards = (game: CodenamesGame): CodeCard[] => {
  const soloTeam = getSoloTeam(game);
  return game.board.filter(card => card.team === soloTeam);
};

// Word list for game generation
export const CODENAMES_WORDS = [
  'AFRICA', 'AGENT', 'AIR', 'ALIEN', 'ALPS', 'AMAZON', 'AMBULANCE', 'AMERICA', 'ANGEL', 'ANTARCTICA',
  'APPLE', 'ARM', 'ATLANTIS', 'AUSTRALIA', 'AZTEC', 'BACK', 'BALL', 'BAND', 'BANK', 'BAR',
  'BARK', 'BAT', 'BATTERY', 'BEACH', 'BEAR', 'BEAT', 'BED', 'BEIJING', 'BELL', 'BELT',
  'BERLIN', 'BERMUDA', 'BERRY', 'BILL', 'BLOCK', 'BOARD', 'BOLT', 'BOMB', 'BOND', 'BOOM',
  'BOOT', 'BOTTLE', 'BOW', 'BOX', 'BRIDGE', 'BRUSH', 'BUCK', 'BUFFALO', 'BUG', 'BUGLE',
  'BUTTON', 'CALF', 'CANADA', 'CAP', 'CAPITAL', 'CAR', 'CARD', 'CARROT', 'CASINO', 'CAST',
  'CAT', 'CELL', 'CENTAUR', 'CENTER', 'CHAIR', 'CHANGE', 'CHARGE', 'CHECK', 'CHEST', 'CHICK',
  'CHINA', 'CHOCOLATE', 'CHURCH', 'CIRCLE', 'CLIFF', 'CLOAK', 'CLUB', 'CODE', 'COLD', 'COMIC',
  'COMPOUND', 'COMPUTER', 'CONDUCTOR', 'CONTRACT', 'COOK', 'COPPER', 'COTTON', 'COURT', 'COVER', 'CRANE',
  'CRASH', 'CRICKET', 'CROSS', 'CROWN', 'CYCLE', 'CZECH', 'DANCE', 'DATE', 'DAY', 'DEATH',
  'DECK', 'DEGREE', 'DIAMOND', 'DICE', 'DINOSAUR', 'DISEASE', 'DOCTOR', 'DOG', 'DRAFT', 'DRAGON',
  'DRESS', 'DRILL', 'DROP', 'DUCK', 'DWARF', 'EAGLE', 'EGYPT', 'ENGINE', 'ENGLAND', 'EUROPE',
  'EYE', 'FACE', 'FAIR', 'FALL', 'FAN', 'FENCE', 'FIELD', 'FIGHTER', 'FIGURE', 'FILE',
  'FILM', 'FIRE', 'FISH', 'FLUTE', 'FLY', 'FOOT', 'FORCE', 'FOREST', 'FORK', 'FRANCE',
  'GAME', 'GAS', 'GENIUS', 'GERMANY', 'GHOST', 'GIANT', 'GLASS', 'GLOVE', 'GOLD', 'GRACE',
  'GRASS', 'GREECE', 'GREEN', 'GROUND', 'HAM', 'HAND', 'HAWK', 'HEAD', 'HEART', 'HELICOPTER',
  'HIMALAYAS', 'HOLE', 'HOLLYWOOD', 'HONEY', 'HOOD', 'HOOK', 'HORN', 'HORSE', 'HORSESHOE', 'HOSPITAL',
  'HOTEL', 'ICE', 'ICE_CREAM', 'INDIA', 'IRON', 'IVORY', 'JACK', 'JAM', 'JET', 'JUPITER',
  'KANGAROO', 'KETCHUP', 'KEY', 'KID', 'KING', 'KIWI', 'KNIFE', 'KNIGHT', 'LAB', 'LAP',
  'LASER', 'LAWYER', 'LEAD', 'LEMON', 'LEPRECHAUN', 'LIFE', 'LIGHT', 'LIMOUSINE', 'LINE', 'LINK',
  'LION', 'LITTER', 'LOCH_NESS', 'LOCK', 'LOG', 'LONDON', 'LUCK', 'MAIL', 'MAMMOTH', 'MAPLE',
  'MARBLE', 'MARCH', 'MASS', 'MATCH', 'MERCURY', 'MEXICO', 'MICROSCOPE', 'MILLIONAIRE', 'MINE', 'MINT',
  'MISSILE', 'MODEL', 'MOLE', 'MOON', 'MOSCOW', 'MOUNT', 'MOUSE', 'MOUTH', 'MUG', 'NAIL',
  'NEEDLE', 'NET', 'NEW_YORK', 'NIGHT', 'NINJA', 'NOTE', 'NOVEL', 'NURSE', 'NUT', 'OCTOPUS',
  'OIL', 'OLIVE', 'OLYMPUS', 'OPERA', 'ORANGE', 'ORGAN', 'PALM', 'PAN', 'PANTS', 'PAPER',
  'PARACHUTE', 'PARK', 'PART', 'PASS', 'PASTE', 'PENGUIN', 'PHOENIX', 'PIANO', 'PIE', 'PILOT',
  'PIN', 'PIPE', 'PIRATE', 'PISTOL', 'PIT', 'PITCH', 'PIZZA', 'PLANE', 'PLASTIC', 'PLATE',
  'PLATYPUS', 'PLAY', 'PLOT', 'POINT', 'POISON', 'POLE', 'POLICE', 'POOL', 'PORT', 'POST',
  'POUND', 'PRESS', 'PRINCESS', 'PUMPKIN', 'PUPIL', 'PYRAMID', 'QUEEN', 'RABBIT', 'RACKET', 'RAY',
  'REVOLUTION', 'RING', 'ROBIN', 'ROBOT', 'ROCK', 'ROME', 'ROOT', 'ROSE', 'ROULETTE', 'ROUND',
  'ROW', 'RULER', 'SATELLITE', 'SATURN', 'SCALE', 'SCHOOL', 'SCIENTIST', 'SCORPION', 'SCREEN', 'SCUBA_DIVER',
  'SEAL', 'SERVER', 'SHADOW', 'SHAKESPEARE', 'SHARK', 'SHIP', 'SHOE', 'SHOP', 'SHOT', 'SINK',
  'SKYSCRAPER', 'SLIP', 'SLUG', 'SMUGGLER', 'SNOW', 'SNOWMAN', 'SOCK', 'SOLDIER', 'SOUL', 'SOUND',
  'SPACE', 'SPELL', 'SPIDER', 'SPIKE', 'SPINE', 'SPOT', 'SPRING', 'SPY', 'SQUARE', 'STADIUM',
  'STAFF', 'STAR', 'STATE', 'STICK', 'STOCK', 'STRAW', 'STREAM', 'STRIKE', 'STRING', 'SUB',
  'SUIT', 'SUPERHERO', 'SWING', 'SWITCH', 'TABLE', 'TABLET', 'TAG', 'TANK', 'TAP', 'TEACHER',
  'TELESCOPE', 'TEMPLE', 'THEATER', 'THIEF', 'THUMB', 'TICK', 'TIE', 'TIME', 'TOKYO', 'TOOTH',
  'TORCH', 'TOWER', 'TRACK', 'TRAIN', 'TRIANGLE', 'TRIP', 'TRUCK', 'TRUNK', 'TUBE', 'TURKEY',
  'UNDERTAKER', 'UNICORN', 'VACUUM', 'VAN', 'VET', 'WAKE', 'WALL', 'WAR', 'WASHER', 'WASHINGTON',
  'WATCH', 'WATER', 'WAVE', 'WEB', 'WELL', 'WHALE', 'WHIP', 'WIND', 'WITCH', 'WIZARD',
  'WORM', 'YARD'
];


============================================================
FILE: frontend/tailwind.config.js
PATH: C:\Users\Jmccl\Coding Projects\CodeNames\frontend\tailwind.config.js
SIZE: 345 characters
============================================================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'game-red': '#DC2626',
        'game-blue': '#2563EB', 
        'game-neutral': '#6B7280',
        'game-assassin': '#1F2937'
      }
    },
  },
  plugins: [],
}


================================================================================
END OF COMBINED FILES
================================================================================
